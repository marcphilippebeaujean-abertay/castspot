{"version":3,"sources":["images/undraw_podcast_q6p7.svg","state/typedSelectors.ts","components/utils/elementWrappers/IconWrapper.tsx","components/views/accounts/accountLinks.tsx","components/navigation/navSidebox.tsx","env_vars/api_url.ts","state/alertsState/alertActions.ts","state/alertsState/alertTypes.ts","components/views/passwordReset/passwordResetLinks.tsx","components/utils/loader.tsx","env_vars/style.ts","components/views/accounts/accountCredentials.tsx","state/accountDetailsState/accountDetailsActions.ts","state/accountDetailsState/accountDetailTypes.ts","components/views/accounts/myPodcasts/rssSubmissionForm/rssFeedFieldNames.ts","components/utils/formUtils.tsx","components/views/accounts/myPodcasts/rssSubmissionForm/rssFeedForm.tsx","components/views/accounts/myPodcasts/rssSubmissionForm/rssFeedSubmission.ts","state/userPodcastsState/userPodcastsActions.ts","state/userPodcastsState/userPodcastsTypes.ts","components/views/accounts/myPodcasts/podcastConfirmationForm/fieldNames.ts","components/views/accounts/myPodcasts/podcastConfirmationForm/podcastConfirmationForm.tsx","components/views/accounts/myPodcasts/podcastConfirmationForm/submission.ts","components/utils/ellipsedText.js","components/views/accounts/myPodcasts/userPodcastCard.tsx","components/views/accounts/myPodcasts/myPodcastView.tsx","components/views/accounts/contactDetails/fieldHeaders.tsx","state/userPostingState/actions.ts","state/userPostingState/types.ts","components/views/accounts/contactDetails/view.tsx","components/views/accounts/contactDetails/editContactDetailsForm/fieldNames.ts","components/views/accounts/contactDetails/editContactDetailsForm/submission.tsx","components/views/accounts/contactDetails/editContactDetailsForm/form.tsx","components/views/accounts/contactDetails/provider.tsx","components/views/accounts/accountRoutes.jsx","components/views/userAccess/formWrapper.tsx","components/views/legal/datenschutzErklaerung.tsx","components/views/legal/dataPolicyAndImprint.tsx","components/views/legal/legalRoutes.tsx","components/views/userAccess/userAccessLinks.tsx","components/views/userAccess/registration/form.tsx","components/views/userAccess/registration/fieldNames.tsx","components/views/userAccess/registration/submission.tsx","state/userAuthState/userAuthActions.ts","state/stateStorageKeys.ts","state/userAuthState/userAuthTypes.ts","components/views/guestSpeakingOpportunittis/links.tsx","components/views/userAccess/login/form.tsx","components/views/userAccess/login/formFieldNames.tsx","components/views/userAccess/userAccessRoutes.jsx","components/views/passwordReset/passwordResetRequest/initPasswordResetRequest.tsx","components/views/passwordReset/passwordResetRequest/fieldnames.ts","components/views/passwordReset/passwordResetConfirm/passwordResetConfirm.tsx","components/views/passwordReset/passwordResetConfirm/fieldnames.ts","components/views/passwordReset/passwordResetConfirm/formSubmission.tsx","components/views/passwordReset/passwordResetRoutes.tsx","components/views/guestSpeakingOpportunittis/guestSpeakingBoard/post.tsx","components/views/guestSpeakingOpportunittis/guestSpeakingBoard/pagination.tsx","components/views/guestSpeakingOpportunittis/guestSpeakingBoard/grid.tsx","components/utils/elementWrappers/cardOverlay.tsx","components/views/guestSpeakingOpportunittis/guestSpeakingBoard/detailsOverlay.tsx","components/views/guestSpeakingOpportunittis/guestSpeakingBoard/createPostForm/fieldnames.ts","components/views/guestSpeakingOpportunittis/guestSpeakingBoard/createPostForm/submission.ts","components/views/guestSpeakingOpportunittis/guestSpeakingBoard/createPostForm/createPostOverlay.tsx","components/views/guestSpeakingOpportunittis/guestSpeakingBoard/applyToPost/fieldnames.ts","components/views/guestSpeakingOpportunittis/guestSpeakingBoard/applyToPost/form.tsx","components/views/guestSpeakingOpportunittis/guestSpeakingBoard/applyToPost/submission.ts","components/views/guestSpeakingOpportunittis/guestSpeakingBoard/unpublishOverlay.tsx","components/views/guestSpeakingOpportunittis/guestSpeakingBoard/postingAvailabilityState.tsx","components/views/guestSpeakingOpportunittis/guestSpeakingBoard/createPostButton.tsx","components/views/guestSpeakingOpportunittis/guestSpeakingBoard/providerComponent.tsx","components/views/guestSpeakingOpportunittis/routes.tsx","components/views/confirmations/emailConfirmation.tsx","components/views/confirmations/deletePost.tsx","components/views/confirmations/routes.tsx","components/views/confirmations/links.tsx","components/views/masterRoutes.tsx","components/utils/elementWrappers/authBasedVisibilityWrappers.tsx","components/navigation/userAccessLinks.tsx","components/navigation/dropdown.tsx","components/navigation/accountsDropdown.tsx","components/navigation/cookieBanner.tsx","components/navigation/loadingAlertBar.tsx","components/navigation/navMenu.tsx","components/alerting/alertsContainer.tsx","components/utils/sessionChecker.tsx","components/views/home/faqElement.tsx","components/views/home/landingPage.tsx","components/footer.tsx","components/App.tsx","serviceWorker.js","state/userAuthState/userAuthReducer.ts","state/accountDetailsState/accountDetailsReducer.ts","state/alertsState/alertReducer.ts","state/userPodcastsState/userPodcastsReducer.ts","state/userContactDetailsState/reducer.ts","state/userContactDetailsState/types.ts","state/userPostingState/reducer.ts","state/store.js","state/reducerNames.ts","index.js","images/undraw_security_o890.svg"],"names":["module","exports","useUserAuthSelector","useSelector","useProfileSelector","useRouterSelector","useAlertsSelector","useUserPodcastSelector","useUserPostingStateSelector","IconWrapper","styled","span","props","AddMargin","Icon","className","size","undefined","Size","accountBaseRoute","link","displayName","icon","Io","settingsLink","contactDetailsLink","Md","contactDetailsEditLink","myPodcastLink","Fa","getAccountLinksAsArray","username","CardWrapper","Card","Navbar","bg","expand","sticky","Nav","activeKey","Body","links","map","Item","key","to","Link","eventKey","API_URL","document","location","origin","API_RESTAUTH_URL","API_REGISTRATION_URL","API_LOGIN_URL","API_LOGOUT_URL","API_CONFIRM_EMAIL","API_PROFILE_URL","API_PASSWORD_RESET_REQUEST","API_PASSWORD_RESET_CONFIRM","API_INIT_RSS_FEED_CONFIRM","API_PODCAST_CONFIRMATION","API_GET_USER_PODCAST_DATA","API_USER_CONTACT_DETAILS_VIEW","API_GUEST_POST","API_SPEAKING_APPLICATION","API_UNPUBLISH_GUEST_POST","API_POSTING_AVAILABILITY","setSuccessAlerts","alerts","type","payload","setNegativeAlerts","setLoadingAlertVisibility","showLoadingAlert","showAlert","passwordResetRequest","confirmResetPassword","SpinnerWrapper","div","Spinner","animation","previousProfileUsername","state","userAuthProfileReducer","profileUsername","email","authToken","userAuthReducer","useState","loading","setLoading","dispatch","useDispatch","urlParts","window","pathname","split","length","a","axios","get","headers","Authorization","then","response","profileResponse","data","firstName","owner","first_name","lastName","last_name","catch","error","console","log","finally","fetchUserProfileData","SUBMIT","handleInputChange","event","formData","setFormData","target","currentTarget","value","checked","name","hasOwnProperty","toggleSubmitButton","inputButtonId","submitBtn","getElementById","disabled","classList","add","remove","hideAllInputErrorMessages","formInputFieldNames","forEach","fieldName","errorDisplayElement","displayInputErrorMessages","faultyInputFieldNames","displayServerErrorMessagesInErrorDiv","errorDivId","errorData","responseErrorMessages","errorKey","insertAdjacentHTML","displaySingleErrorMessageInErrorDiv","rssFeed","setRSSFeed","Form","onSubmit","e","reduxActionDispatch","preventDefault","fieldNames","innerHTML","endsWith","post","detail","submitForm","Group","Label","Control","onChange","placeholder","Text","id","FEED_INPUT","controlId","Button","variant","CODE_INPUT","confirmationCode","setConfirmationCode","requestData","podcast","p","HeaderImage","img","PodcastCard","Header","src","image_link","title","rss_url","userPodcastsReducer","podcastConfirmationIsPending","podcasts","userPodcastApiResponseData","podcast_confirmation_pending","fetchUserPodcastInitData","index","EMAIL_FIELD_HEADER","DISCORD_FIELD_HEADER","SKYPE_FIELD_HEADER","fetchUserPostingState","contactDetails","discord","skype","postingStateReducer","hasCreatedContactDetails","onClick","push","EMAIL","DISCORD","SKYPE","ERROR_DIV","setContactDetails","formKeys","formState","test","getFaultyInputFieldNames","registrationPayload","reponse","updateFormElement","formSubmit","exact","path","component","ContactDetailsForm","boxHeader","AccountDetailsView","MyPodcastView","ContactDetailsView","href","enDatenschutzLink","Fragment","DatenschutzErklaerung","DataPolicy","home","login","register","logout","Title","formInputValues","password","legalAgreement","password1","password2","handleSubmit","InputGroup","Prepend","USERNAME","PASSWORD","Check","LEGAL_AGREEMENT","sendLogoutRequest","localStorage","removeItem","guestBoard","userDetails","setUserDetails","login_username","setItem","Date","sessionActive","loginTime","RegisterPage","LoginPage","setEmail","EMAIL_FIELDNAME","passwordResetState","setPasswordResetState","pathElements","passwordResetPayload","uid","token","new_password1","new_password2","fieldnames","InitPasswordResetRequest","PasswordResetConfirm","PodcastImage","GuestPostRow","generatePostButtonId","postUuid","generateWrapperPostId","applicationsThisMonth","isVerifiedPodcaster","guestPostData","useContext","GuestPostsContext","setCurrentDetailedPost","setApplicationPostId","setPostToUnpublish","userIsPoster","host","alt","Row","Col","md","heading","buttonProps","style","height","stopPropagation","applyButtonIsDisabled","has_already_applied","PaginationWrapper","items","number","Pagination","active","parseInt","page","resetDataFetch","maxPages","posts","setPosts","totalPages","setTotalPages","setPage","dataFetched","setDataFetched","urlParams","router","search","queryParams","QueryString","currentQueryPage","config","API_GUEST_POST_LIST","results","total_pages","postData","postIndex","Overlay","CardOverlay","Container","Modal","show","onHide","closeOverlay","closeButton","children","PostDetailsOverlay","currentDetailedPost","description","DESCRIPTION","headingMaxCharacters","descriptionMaxCharacters","postPayload","postHeading","postDescription","only_podcasters_can_apply","onlyPodcasters","CreatePostOverlay","formValues","setFormValues","handleChange","closeOverlayCallback","Submit","as","rows","MESSAGE","messageMaxCharacters","applicationMessage","agreedToTerms","badInputs","guestPostId","remainingApplications","buttonId","postId","pk","postsThisMonth","Alert","setCreatePostOpen","React","createContext","applicationPostId","postToUnpublish","createPostOpen","Provider","GuestSpeakingBoard","confirmationToken","messageDiv","postPk","ConfirmEmail","DeletePost","ShowOnlyWhenLoggedIn","DontShowWhenLoggedIn","linkItems","DropdownWrapper","NavDropdown","isActive","Dropdown","currentRoutePathname","dropdownHeader","startsWith","accountLinks","BannerWrapper","getItem","cookiesAccepted","setCookiesAccepted","ProgressBarStyle","previousLoadingState","setPreviousLoadingState","currentBarPercent","setCurrentBarPercent","loadingAlertState","alertsReducer","targetBarPercent","setTimeout","setBarPercent","barPercentIncreaseLoop","ProgressBar","now","NavbarStyle","fixed","Brand","Toggle","aria-controls","Collapse","reducerState","currentUrlPathname","lastAlertUrlPath","successAlerts","alert","negativeAlerts","initLogout","sessionEndTime","parse","FAQWrapper","opened","setOpened","width","question","answer","Banner","FeatureList","ul","ConversionButton","button","MainImage","Section","section","SectionMainBg","CardOnPurpleBg","maxHeight","maxWidth","display","margin","lg","PodcastSVG","SecuritySVG","xs","Footer","footer","Background","App","fluid","Boolean","hostname","match","initialState","loggedOutState","previousState","action","history","createBrowserHistory","createRootReducer","combineReducers","userProfileReducer","connectRouter","userContactDetailsReducer","userPostingReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","routerMiddleware","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.26e00e6f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/undraw_podcast_q6p7.af233755.svg\";","import { useSelector, TypedUseSelectorHook } from \"react-redux\";\nimport { RouterState } from \"connected-react-router\";\n\nimport { UserState } from \"./userAuthState/userAuthTypes\";\nimport { UserProfileState } from \"./accountDetailsState/accountDetailTypes\";\nimport { AlertState } from \"./alertsState/alertTypes\";\nimport { UserPodcastsState } from \"./userPodcastsState/userPodcastsTypes\";\nimport { ContactDetailsState } from \"./userContactDetailsState/types\";\nimport { UserPostingState } from \"./userPostingState/types\";\nimport * as reducerNames from \"./reducerNames\";\n\ninterface UserStateSelector {\n  [reducerNames.USER_AUTH_REDUCER]: UserState;\n}\n\nexport const useUserAuthSelector: TypedUseSelectorHook<UserStateSelector> = useSelector;\n\ninterface ProfileStateSelector {\n  [reducerNames.USER_PROFILE_REDUCER]: UserProfileState;\n}\n\nexport const useProfileSelector: TypedUseSelectorHook<ProfileStateSelector> = useSelector;\n\ninterface RouterStateSelector {\n  [reducerNames.ROUTE_HISTORY_REDUCER]: RouterState;\n}\n\nexport const useRouterSelector: TypedUseSelectorHook<RouterStateSelector> = useSelector;\n\ninterface AlertStateSelector {\n  [reducerNames.ALERTS_REDUCER]: AlertState;\n}\n\nexport const useAlertsSelector: TypedUseSelectorHook<AlertStateSelector> = useSelector;\n\ninterface UserPodcastsSelector {\n  [reducerNames.USER_PODCAST_REDUCER]: UserPodcastsState;\n}\n\nexport const useUserPodcastSelector: TypedUseSelectorHook<UserPodcastsSelector> = useSelector;\n\ninterface UserContactDetailsSelector {\n  [reducerNames.USER_CONTACT_DETAILS_REDUCER]: ContactDetailsState;\n}\n\nexport const useUserContactDetailsSelector: TypedUseSelectorHook<UserContactDetailsSelector> = useSelector;\n\ninterface UserPostingStateSelector {\n  [reducerNames.POSTING_STATE_REDUCER]: UserPostingState;\n}\n\nexport const useUserPostingStateSelector: TypedUseSelectorHook<UserPostingStateSelector> = useSelector;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const IconSize = 16;\n\nconst IconWrapper = styled.span`\n  display: inline-block;\n  position: relative;\n  bottom: 1.5px;\n`;\n\ninterface IconProps {\n  Icon: any;\n  Size?: Number | undefined;\n  AddMargin?: boolean | undefined;\n}\n\nexport default (props: IconProps) => {\n  const { AddMargin, Icon } = props;\n  return (\n    <IconWrapper className={AddMargin === false ? \"\" : \"mr-2\"}>\n      <Icon size={props.Size === undefined ? IconSize : props.Size} />\n    </IconWrapper>\n  );\n};\n","import { LinkItem } from \"../../utils/navLinkUtils\";\nimport * as Io from \"react-icons/io\";\nimport * as Fa from \"react-icons/fa\";\nimport * as Md from \"react-icons/md\";\nimport IconWrapper from \"../../utils/elementWrappers/IconWrapper\";\nimport React from \"react\";\n\nexport const accountBaseRoute: LinkItem = {\n  link: \"/account/\",\n  displayName: \"Account\",\n  icon: <IconWrapper Icon={Io.IoIosPerson} />\n};\n\nexport const settingsLink: LinkItem = {\n  link: accountBaseRoute.link + \"credentials/\",\n  displayName: \"Credentials\",\n  icon: <IconWrapper Icon={Io.IoIosKey} />\n};\n\nexport const contactDetailsLink: LinkItem = {\n  link: accountBaseRoute.link + \"contact-details/\",\n  displayName: \"Contact Details\",\n  icon: <IconWrapper Icon={Md.MdContactMail} />\n};\n\nexport const contactDetailsEditLink: LinkItem = {\n  link: accountBaseRoute.link + \"contact-details/edit\",\n  displayName: \"Edit Contact Details\"\n};\n\nexport const myPodcastLink: LinkItem = {\n  link: accountBaseRoute.link + \"podcast/\",\n  displayName: \"My Podcast\",\n  icon: <IconWrapper Icon={Fa.FaPodcast} />\n};\n\nexport const profileLink: LinkItem = {\n  link: accountBaseRoute.link + \"profile/\",\n  displayName: \"Profile\",\n  icon: <IconWrapper Icon={Io.IoIosToday} />\n};\n\nexport const getAccountLinksAsArray = (username: string): Array<LinkItem> => {\n  return [\n    myPodcastLink,\n    contactDetailsLink,\n    {\n      ...settingsLink,\n      link: settingsLink.link + username\n    }\n  ];\n};\n","import React from \"react\";\nimport { Card, Nav, Navbar } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport styled from \"styled-components\";\n\nimport { LinkItem } from \"../utils/navLinkUtils\";\n\nconst CardWrapper = styled(Card)`\n  z-index: 0;\n  .pad-small {\n    padding-bottom: 0.5rem;\n  }\n`;\n\ninterface BoxHeader {\n  title: string;\n  icon: JSX.Element;\n}\n\nexport default (props: { boxHeader: BoxHeader; links: Array<LinkItem> }) => {\n  return (\n    <CardWrapper className=\"text-left\">\n      {/*<Card.Header className=\"bg-white\">\n        {props.boxHeader.icon}\n        {props.boxHeader.title}\n  </Card.Header>*/}\n      <Navbar bg=\"white\" expand=\"lg\" sticky=\"top\" className=\"p-0\">\n        <Nav activeKey={\"\"}>\n          <Card.Body className=\"d-flex flex-column\">\n            {props.links.map(link => (\n              <Nav.Item\n                className=\"p-0\"\n                key={`sidebox-item ${link.displayName}`}\n              >\n                <LinkContainer to={link.link}>\n                  <Nav.Link className=\"pb-1\" eventKey={link.link}>\n                    {link.icon}\n                    {link.displayName}\n                  </Nav.Link>\n                </LinkContainer>\n              </Nav.Item>\n            ))}\n          </Card.Body>\n        </Nav>\n      </Navbar>\n    </CardWrapper>\n  );\n};\n","export const API_URL =\n  process.env.NODE_ENV === \"development\"\n    ? \"http://127.0.0.1:8000/api/\"\n    : document.location.origin + \"/api/\";\nexport const API_RESTAUTH_URL = API_URL + \"rest-auth/\";\nexport const API_REGISTRATION_URL = API_RESTAUTH_URL + \"registration/\";\n\n// Specific endpoints\nexport const API_LOGIN_URL = API_RESTAUTH_URL + \"login/\";\nexport const API_LOGOUT_URL = API_RESTAUTH_URL + \"logout/\";\nexport const API_CONFIRM_EMAIL = API_REGISTRATION_URL + \"verify-email/\";\nexport const API_PROFILE_URL = API_URL + \"account-details/\";\n\nexport const API_PASSWORD_REQUEST = API_RESTAUTH_URL + \"password/\";\nexport const API_PASSWORD_RESET_REQUEST = API_PASSWORD_REQUEST + \"reset/\";\nexport const API_PASSWORD_RESET_CONFIRM =\n  API_PASSWORD_RESET_REQUEST + \"confirm/\";\n\nexport const API_INIT_RSS_FEED_CONFIRM = API_URL + \"rss-feed-confirmation/\";\nexport const API_PODCAST_CONFIRMATION = API_URL + \"podcast-confirmation/\";\nexport const API_GET_USER_PODCAST_DATA = API_URL + \"podcast-user-data/\";\n\nexport const API_USER_CONTACT_DETAILS_VIEW = API_URL + \"user-contact-details/\";\n\nexport const API_GUEST_POST = API_URL + `guest-posts/`;\nexport const API_GUEST_POST_LIST = (page: string) =>\n  API_GUEST_POST + `?page=${page}`;\n\nexport const API_SPEAKING_APPLICATION = API_URL + \"speaking-application/\";\nexport const API_UNPUBLISH_GUEST_POST = API_URL + \"unpublish-post/\";\nexport const API_POSTING_AVAILABILITY = API_URL + \"posting-availability/\";\n","import * as types from \"./alertTypes\";\n\nexport const setSuccessAlerts = (\n  alerts: Array<String>\n): types.SetSuccessAlerts => {\n  return {\n    type: types.SET_SUCCESS_ALERTS,\n    payload: alerts\n  };\n};\n\nexport const setNegativeAlerts = (\n  alerts: Array<String>\n): types.SetNegativeAlerts => {\n  return {\n    type: types.SET_NEGATIVE_ALERTS,\n    payload: alerts\n  };\n};\n\nexport const clearAlerts = (): types.ClearAllAlerts => {\n  return {\n    type: types.CLEAR_ALERTS\n  };\n};\n\nexport const setLoadingAlertVisibility = (\n  showLoadingAlert: types.LOADING_STATES\n): types.SetLoadingAlertVisibility => {\n  return {\n    type: types.SET_LOADING_ALERT_VISIBILITY,\n    showAlert: showLoadingAlert\n  };\n};\n","export const SET_SUCCESS_ALERTS = \"setSuccessAlerts\";\nexport const SET_NEGATIVE_ALERTS = \"setNegativeAlerts\";\nexport const SET_LOADING_ALERT_VISIBILITY = \"setLoadingAlertVisibility\";\nexport const CLEAR_ALERTS = \"clearAlerts\";\n\nexport type LOADING_STATES = \"loading\" | \"loaded\" | \"finishing\";\n\nexport interface AlertState {\n  successAlerts: Array<String>;\n  negativeAlerts: Array<String>;\n  lastAlertUrlPath: string;\n  loadingAlertState: LOADING_STATES;\n}\n\nexport interface SetSuccessAlerts {\n  type: typeof SET_SUCCESS_ALERTS;\n  payload: Array<String>;\n}\n\nexport interface SetNegativeAlerts {\n  type: typeof SET_NEGATIVE_ALERTS;\n  payload: Array<String>;\n}\n\nexport interface ClearAllAlerts {\n  type: typeof CLEAR_ALERTS;\n}\n\nexport interface SetLoadingAlertVisibility {\n  type: typeof SET_LOADING_ALERT_VISIBILITY;\n  showAlert: LOADING_STATES;\n}\n","import { LinkItem } from \"../../utils/navLinkUtils\";\n\nexport const passwordResetRequest: LinkItem = {\n  displayName: \"Reset Password\",\n  link: \"/request-password-reset\"\n};\n\nexport const confirmResetPassword: LinkItem = {\n  displayName: \"Confirm Password Reset\",\n  link: \"/reset\"\n};\n\nexport const passwordResetRequestConfirmationUrl = \"/password-reset-requested\";\nexport const passwordResetConfirmationUrl = \"/password-reset\";\n","import React from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport styled from \"styled-components\";\n\nimport { themeColour } from \"../../env_vars/style\";\n\nconst SpinnerWrapper = styled.div`\n  margin-top: 4rem;\n  width: 100%;\n  div {\n    color: ${themeColour};\n  }\n`;\n\nexport default () => {\n  return (\n    <SpinnerWrapper>\n      <Spinner animation=\"border\" className=\"ml-auto mr-auto d-block\" />\n    </SpinnerWrapper>\n  );\n};\n","export const themeColour = `#6c63ff`;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Card } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport * as Io from \"react-icons/io\";\n\nimport IconWrapper from \"../../utils/elementWrappers/IconWrapper\";\nimport { useProfileSelector } from \"../../../state/typedSelectors\";\nimport { useUserAuthSelector } from \"../../../state/typedSelectors\";\nimport { fetchUserProfileData } from \"../../../state/accountDetailsState/accountDetailsActions\";\nimport { passwordResetRequest } from \"../passwordReset/passwordResetLinks\";\nimport Loader from \"../../utils/loader\";\n\nexport default () => {\n  const previousProfileUsername = useProfileSelector(\n    state => state.userAuthProfileReducer.profileUsername\n  );\n  const { email } = useProfileSelector(state => state.userAuthProfileReducer);\n\n  const authToken = useUserAuthSelector(\n    state => state.userAuthReducer.authToken\n  );\n\n  const [loading, setLoading] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const pathUrl = window.location.pathname;\n  const urlParts = pathUrl.split(\"/\");\n  const profileUsername = urlParts[urlParts.length - 1];\n\n  if (previousProfileUsername !== profileUsername) {\n    if (authToken !== null && loading === false) {\n      setLoading(true);\n      dispatch(fetchUserProfileData(profileUsername, authToken));\n    }\n  } else {\n    if (loading === true) {\n      setLoading(false);\n    }\n  }\n  return (\n    <div>\n      <h1>Credentials</h1>\n      {loading === true ? (\n        <Loader />\n      ) : (\n        <Card className=\"mb-2\">\n          <Card.Body>\n            <small>\n              <IconWrapper Icon={Io.IoIosPerson} />\n              Username\n            </small>\n            <p>{profileUsername}</p>\n            <small>\n              <IconWrapper Icon={Io.IoIosMail} />\n              Email\n            </small>\n            <p>{email}</p>\n            <small>\n              <IconWrapper Icon={Io.IoIosLock} />\n              Password\n            </small>\n            <p className=\"mb-0\">\n              Unsure about the safety of your password?{\" \"}\n              <Link to={passwordResetRequest.link}>\n                {passwordResetRequest.displayName}\n              </Link>\n            </p>\n          </Card.Body>\n        </Card>\n      )}\n    </div>\n  );\n};\n","import axios from \"axios\";\n\nimport * as types from \"./accountDetailTypes\";\nimport { API_PROFILE_URL } from \"../../env_vars/api_url\";\nimport { setLoadingAlertVisibility } from \"../alertsState/alertActions\";\n\nconst updateUserProfile = (\n  userProfileData: types.UserProfileState\n): types.UpdateUserProfileAction => {\n  return {\n    type: types.UPDATE_USER_PROFILE,\n    payload: userProfileData\n  };\n};\n\nexport const fetchUserProfileData = (username: string, authToken: string) => {\n  return async (dispatch: Function) => {\n    dispatch(setLoadingAlertVisibility(\"loading\"));\n    axios\n      .get(API_PROFILE_URL, {\n        headers: { Authorization: \"Token \" + authToken }\n      })\n      .then(response => {\n        const profileResponse: types.ProfileApiResponseObject = response.data;\n        dispatch(\n          updateUserProfile({\n            firstName: profileResponse.owner.first_name,\n            lastName: profileResponse.owner.last_name,\n            email: profileResponse.owner.email,\n            profileUsername: username\n          })\n        );\n      })\n      .catch(error => console.log(error))\n      .finally(() => dispatch(setLoadingAlertVisibility(\"finishing\")));\n  };\n};\n","export const UPDATE_USER_PROFILE = \"updateUserProfile\";\n\nexport interface UserProfileState {\n  firstName: string;\n  lastName: string;\n  email: string;\n  profileUsername: string;\n}\n\nexport interface UpdateUserProfileAction {\n  type: typeof UPDATE_USER_PROFILE;\n  payload: UserProfileState;\n}\n\nexport interface ProfileApiResponseObject {\n  owner: {\n    username: string;\n    first_name: string;\n    last_name: string;\n    email: string;\n  };\n  bio: string;\n}\n","export const FEED_INPUT = \"rssInputField\";\nexport const SUBMIT = \"rssFeedSubmit\";\nexport const FORM_ERROR_DIV = \"rssFormErrorDiv\";\n","export const handleInputChange = (\n  event: React.FormEvent<HTMLInputElement>,\n  formData: Object,\n  setFormData: Function\n) => {\n  const target = event.currentTarget;\n  const value = target.type === \"checkbox\" ? target.checked : target.value;\n  const name = target.name;\n  if (!formData.hasOwnProperty(name)) {\n    console.error(\n      \"handleInputChange in formUtils.sx tried to update a form element that was not in the form data object\"\n    );\n  } else {\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  }\n};\n\nexport const toggleSubmitButton = (inputButtonId: string) => {\n  const submitBtn = document.getElementById(inputButtonId) as HTMLInputElement;\n  submitBtn.disabled = !submitBtn.disabled;\n  if (submitBtn.disabled) {\n    submitBtn.classList.add(\"disabled\");\n  } else {\n    submitBtn.classList.remove(\"disabled\");\n  }\n};\n\nexport const hideAllInputErrorMessages = (\n  formInputFieldNames: Array<String>\n) => {\n  formInputFieldNames.forEach(fieldName => {\n    const errorDisplayElement = document.getElementById(`${fieldName}-error`);\n    if (errorDisplayElement !== null) {\n      errorDisplayElement.classList.add(\"d-none\");\n    }\n  });\n};\n\nexport const displayInputErrorMessages = (\n  faultyInputFieldNames: Array<String>\n) => {\n  faultyInputFieldNames.forEach(fieldName => {\n    const errorDisplayElement = document.getElementById(`${fieldName}-error`);\n    if (errorDisplayElement === null) {\n      console.error(\n        `The html element used to display an error for input field \"${fieldName}\" could not be found`\n      );\n    } else {\n      errorDisplayElement.classList.remove(\"d-none\");\n    }\n  });\n};\n\nexport const displayServerErrorMessagesInErrorDiv = (\n  errorDivId: string,\n  errorData: Array<String>\n) => {\n  const responseErrorMessages = document.getElementById(\n    errorDivId\n  ) as HTMLElement;\n  for (let errorKey in errorData) {\n    responseErrorMessages.insertAdjacentHTML(\n      \"afterbegin\",\n      `<small class=\"text-danger form-text\">${errorData[errorKey][0]}</small>`\n    );\n  }\n};\n\nexport const displaySingleErrorMessageInErrorDiv = (\n  errorDivId: string,\n  error: String\n) => {\n  const responseErrorMessages = document.getElementById(\n    errorDivId\n  ) as HTMLElement;\n  responseErrorMessages.insertAdjacentHTML(\n    \"afterbegin\",\n    `<small class=\"text-danger form-text\">${error}</small>`\n  );\n};\n\nexport const resetForm = (formId: string) => {\n  const form = document.getElementById(formId) as HTMLFormElement;\n  Array.from(form.getElementsByTagName(\"input\")).forEach(inputField => {\n    if (inputField.type === \"checkbox\") {\n      inputField.checked = false;\n    } else {\n      inputField.value = \"\";\n    }\n  });\n};\n","import React, { useState } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport * as Io from \"react-icons/io\";\n\nimport { FEED_INPUT, SUBMIT, FORM_ERROR_DIV } from \"./rssFeedFieldNames\";\nimport submitForm from \"./rssFeedSubmission\";\nimport IconWrapper from \"../../../../utils/elementWrappers/IconWrapper\";\nimport { useUserAuthSelector } from \"../../../../../state/typedSelectors\";\n\nexport default () => {\n  const [rssFeed, setRSSFeed] = useState(\"\");\n  const dispatch = useDispatch();\n  const authToken = useUserAuthSelector(\n    state => state.userAuthReducer.authToken\n  );\n  return (\n    <Form\n      onSubmit={(e: React.FormEvent<HTMLFormElement>) =>\n        submitForm(rssFeed, e, dispatch, authToken)\n      }\n    >\n      <Form.Group>\n        <Form.Label>\n          <IconWrapper Icon={Io.IoLogoRss} />\n          RSS Feed\n        </Form.Label>\n        <Form.Control\n          name={FEED_INPUT}\n          value={rssFeed}\n          onChange={(e: React.FormEvent<HTMLInputElement>) => {\n            const target = e.currentTarget;\n            setRSSFeed(target.value);\n          }}\n          type=\"text\"\n          placeholder=\"mypodcast.com/rss.xml\"\n        ></Form.Control>\n        <Form.Text className=\"d-none text-danger\" id={FEED_INPUT + \"-error\"}>\n          Invalid RSS Feed\n        </Form.Text>\n      </Form.Group>\n      <Form.Group controlId=\"submit\">\n        <Button id={SUBMIT} variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n        <div id={FORM_ERROR_DIV}>{/* errors inserted here */}</div>\n      </Form.Group>\n    </Form>\n  );\n};\n","import axios from \"axios\";\n\nimport * as fieldNames from \"./rssFeedFieldNames\";\nimport {\n  displaySingleErrorMessageInErrorDiv,\n  toggleSubmitButton\n} from \"../../../../utils/formUtils\";\nimport { API_INIT_RSS_FEED_CONFIRM } from \"../../../../../env_vars/api_url\";\nimport { rssFeedSubmitted } from \"../../../../../state/userPodcastsState/userPodcastsActions\";\nimport {\n  setSuccessAlerts,\n  setLoadingAlertVisibility\n} from \"../../../../../state/alertsState/alertActions\";\n\nexport default (\n  rssFeed: string,\n  event: React.FormEvent<HTMLFormElement>,\n  reduxActionDispatch: Function,\n  authToken: string | null\n) => {\n  event.preventDefault();\n  if (authToken === null) return;\n  toggleSubmitButton(fieldNames.SUBMIT);\n  const errorDiv = document.getElementById(\n    fieldNames.FORM_ERROR_DIV\n  ) as HTMLElement;\n  errorDiv.innerHTML = \"\";\n\n  if (!rssFeed.endsWith(\".xml\")) {\n    (document.getElementById(\n      fieldNames.FEED_INPUT + `-error`\n    ) as HTMLElement).classList.remove(\"d-none\");\n    return;\n  }\n  reduxActionDispatch(setLoadingAlertVisibility(\"loading\"));\n  axios\n    .post(\n      API_INIT_RSS_FEED_CONFIRM,\n      { rssFeed: rssFeed },\n      {\n        headers: { Authorization: `Token ${authToken}` }\n      }\n    )\n    .then(response => {\n      reduxActionDispatch(rssFeedSubmitted());\n      reduxActionDispatch(\n        setSuccessAlerts([\n          \"RSS Feed submitted - please check the email provided in the feed to confirm your podcast.\"\n        ])\n      );\n    })\n    .catch(error => {\n      displaySingleErrorMessageInErrorDiv(\n        fieldNames.FORM_ERROR_DIV,\n        error.response.data.detail\n      );\n      toggleSubmitButton(fieldNames.SUBMIT);\n    })\n    .finally(() => reduxActionDispatch(setLoadingAlertVisibility(\"loading\")));\n};\n","import axios from \"axios\";\n\nimport * as types from \"./userPodcastsTypes\";\nimport { API_GET_USER_PODCAST_DATA } from \"../../env_vars/api_url\";\nimport { setLoadingAlertVisibility } from \"../alertsState/alertActions\";\n\nexport const rssFeedSubmitted = (): types.RssFeedSubmitted => {\n  return {\n    type: types.RSS_FEED_SUBMITTED,\n    payload: {}\n  };\n};\n\nconst setUserPodcastsInitData = (\n  userPodcastApiResponseData: types.UserPodcastApiResponseObject\n): types.SetUserPodcastsInitData => {\n  return {\n    type: types.SET_USER_PODCASTS_INIT_DATA,\n    payload: {\n      podcastConfirmationIsPending:\n        userPodcastApiResponseData.podcast_confirmation_pending,\n      podcasts: userPodcastApiResponseData.podcasts\n    }\n  };\n};\n\nexport const addUserPodcast = (\n  podcast: types.UserPodcast\n): types.AddPodcast => {\n  return {\n    type: types.ADD_USER_PODCAST,\n    podcast: podcast\n  };\n};\n\nexport const fetchUserPodcastInitData = (authToken: string | null) => {\n  return async (dispatch: Function) => {\n    dispatch(setLoadingAlertVisibility(\"loading\"));\n    axios\n      .get(API_GET_USER_PODCAST_DATA, {\n        headers: { Authorization: \"Token \" + authToken }\n      })\n      .then(response => {\n        const profileResponse: types.UserPodcastApiResponseObject =\n          response.data;\n        dispatch(setUserPodcastsInitData(profileResponse));\n      })\n      .catch(error => console.log(error.response.data.detail))\n      .finally(() => dispatch(setLoadingAlertVisibility(\"finishing\")));\n  };\n};\n","export const RSS_FEED_SUBMITTED = \"rssFeedSubmitted\";\nexport const SET_USER_PODCASTS_INIT_DATA = \"setUserPodcastInitData\";\nexport const ADD_USER_PODCAST = \"addUserPodcast\";\n\nexport interface UserPodcast {\n  title: string;\n  image_link: string;\n  rss_url: string;\n}\n\nexport interface UserPodcastsState {\n  podcastConfirmationIsPending: boolean | null;\n  podcasts: Array<UserPodcast>;\n}\n\nexport interface RssFeedSubmitted {\n  type: typeof RSS_FEED_SUBMITTED;\n  payload: {};\n}\n\nexport interface AddPodcast {\n  type: typeof ADD_USER_PODCAST;\n  podcast: UserPodcast;\n}\n\nexport interface SetUserPodcastsInitData {\n  type: typeof SET_USER_PODCASTS_INIT_DATA;\n  payload: UserPodcastsState;\n}\n\nexport interface UserPodcastApiResponseObject {\n  podcast_confirmation_pending: boolean;\n  podcasts: Array<UserPodcast>;\n}\n","export const CODE_INPUT = \"codeConfirmationInputField\";\nexport const SUBMIT = \"codeConfirmationSubmit\";\nexport const FORM_ERROR_DIV = \"codeConfirmationErrorDiv\";\n","import React, { useState } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\n\nimport { CODE_INPUT, SUBMIT, FORM_ERROR_DIV } from \"./fieldNames\";\nimport submitForm from \"./submission\";\nimport { useUserAuthSelector } from \"../../../../../state/typedSelectors\";\n\nexport default () => {\n  const [confirmationCode, setConfirmationCode] = useState(\"\");\n  const dispatch = useDispatch();\n  const authToken = useUserAuthSelector(\n    state => state.userAuthReducer.authToken\n  );\n  return (\n    <Form\n      onSubmit={(e: React.FormEvent<HTMLFormElement>) =>\n        submitForm(confirmationCode, e, dispatch, authToken)\n      }\n    >\n      <Form.Group>\n        <Form.Label>\n          Please enter the Confirmation Code sent to you via Email\n        </Form.Label>\n        <Form.Control\n          name={CODE_INPUT}\n          value={confirmationCode}\n          onChange={(e: React.FormEvent<HTMLInputElement>) => {\n            const target = e.currentTarget;\n            setConfirmationCode(target.value);\n          }}\n          type=\"text\"\n          placeholder=\"\"\n        ></Form.Control>\n        <Form.Text className=\"d-none text-danger\" id={CODE_INPUT + \"-error\"}>\n          Invalid Code\n        </Form.Text>\n      </Form.Group>\n      <Form.Group controlId=\"submit\">\n        <Button id={SUBMIT} variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n        <div id={FORM_ERROR_DIV}>{/* errors inserted here */}</div>\n      </Form.Group>\n    </Form>\n  );\n};\n","import axios from \"axios\";\n\nimport * as fieldNames from \"./fieldNames\";\nimport {\n  displaySingleErrorMessageInErrorDiv,\n  toggleSubmitButton\n} from \"../../../../utils/formUtils\";\nimport { API_PODCAST_CONFIRMATION } from \"../../../../../env_vars/api_url\";\nimport { addUserPodcast } from \"../../../../../state/userPodcastsState/userPodcastsActions\";\nimport {\n  setLoadingAlertVisibility,\n  setSuccessAlerts\n} from \"../../../../../state/alertsState/alertActions\";\n\nexport default (\n  confirmationCode: string,\n  event: React.FormEvent<HTMLFormElement>,\n  reduxActionDispatch: Function,\n  authToken: string | null\n) => {\n  event.preventDefault();\n  if (authToken === null) return;\n\n  const errorDiv = document.getElementById(\n    fieldNames.FORM_ERROR_DIV\n  ) as HTMLElement;\n  errorDiv.innerHTML = \"\";\n  if (confirmationCode.length !== 8) {\n    (document.getElementById(\n      fieldNames.CODE_INPUT + `-error`\n    ) as HTMLElement).classList.remove(\"d-none\");\n    return;\n  } else {\n    (document.getElementById(\n      fieldNames.CODE_INPUT + `-error`\n    ) as HTMLElement).classList.add(\"d-none\");\n  }\n\n  toggleSubmitButton(fieldNames.SUBMIT);\n  const requestData = {\n    confirmationCode: confirmationCode\n  };\n  reduxActionDispatch(setLoadingAlertVisibility(\"loading\"));\n  axios\n    .post(API_PODCAST_CONFIRMATION, requestData, {\n      headers: { Authorization: `Token ${authToken}` }\n    })\n    .then(response => {\n      reduxActionDispatch(addUserPodcast(response.data));\n      reduxActionDispatch(\n        setSuccessAlerts([\"Added new Podcast to your Account\"])\n      );\n    })\n    .catch(error => {\n      displaySingleErrorMessageInErrorDiv(\n        fieldNames.FORM_ERROR_DIV,\n        error.response.data.detail\n      );\n      toggleSubmitButton(fieldNames.SUBMIT);\n    })\n    .finally(() => reduxActionDispatch(setLoadingAlertVisibility(\"finishing\")));\n};\n","import styled from \"styled-components\";\n\nexport default styled.p`\n  white-space: nowrap;\n  width: 100%;\n  overflow: hidden; /* \"overflow\"-Wert darf nicht \"visible\" sein */\n  text-overflow: ellipsis;\n`;\n","import React, { FunctionComponent } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport * as Io from \"react-icons/io\";\nimport styled from \"styled-components\";\n\nimport IconWrapper from \"../../../utils/elementWrappers/IconWrapper\";\nimport { UserPodcast } from \"../../../../state/userPodcastsState/userPodcastsTypes\";\nimport EllipsedText from \"../../../utils/ellipsedText\";\n\nconst HeaderImage = styled.img`\n  display: inline-block;\n  height: 30px;\n  width: 30px;\n  border-radius: 25px;\n`;\n\ninterface PodcastCardProps {\n  podcast: UserPodcast;\n}\n\nconst PodcastCard: FunctionComponent<PodcastCardProps> = ({ podcast }) => {\n  return (\n    <Card>\n      <Card.Header className=\"bg-white\">\n        <HeaderImage className=\"mr-2\" src={podcast.image_link} />\n        {podcast.title}\n      </Card.Header>\n      <Card.Body>\n        <small>\n          {\" \"}\n          <IconWrapper Icon={Io.IoLogoRss} />\n          RSS Feed\n        </small>\n        <EllipsedText className=\"mb-0\">{podcast.rss_url}</EllipsedText>\n      </Card.Body>\n    </Card>\n  );\n};\n\nexport default PodcastCard;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\n\nimport Loader from \"../../../utils/loader\";\nimport {\n  useUserPodcastSelector,\n  useUserAuthSelector\n} from \"../../../../state/typedSelectors\";\nimport { fetchUserPodcastInitData } from \"../../../../state/userPodcastsState/userPodcastsActions\";\nimport RSSForm from \"./rssSubmissionForm/rssFeedForm\";\nimport PodcastConfirmation from \"./podcastConfirmationForm/podcastConfirmationForm\";\nimport PodcastCard from \"./userPodcastCard\";\n\nexport default () => {\n  const { authToken } = useUserAuthSelector(state => state.userAuthReducer);\n  const { podcastConfirmationIsPending, podcasts } = useUserPodcastSelector(\n    state => state.userPodcastsReducer\n  );\n\n  const [loading, setLoading] = useState(false);\n\n  const dispatch = useDispatch();\n\n  if (podcastConfirmationIsPending === null && loading === false) {\n    setLoading(true);\n    dispatch(fetchUserPodcastInitData(authToken));\n  }\n  return (\n    <div>\n      <h1>My Podcast</h1>\n      {podcastConfirmationIsPending === null ? (\n        <Loader />\n      ) : (\n        <div>\n          {podcasts.map((podcast, index) => (\n            <PodcastCard key={`${index}-user-podcast`} podcast={podcast} />\n          ))}\n          {!podcastConfirmationIsPending && podcasts.length === 0 ? (\n            <RSSForm />\n          ) : null}\n          {podcastConfirmationIsPending ? <PodcastConfirmation /> : null}\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nimport * as Io from \"react-icons/io\";\nimport * as Fa from \"react-icons/fa\";\n\nimport IconWrapper from \"../../../utils/elementWrappers/IconWrapper\";\n\nexport const EMAIL_FIELD_HEADER = (\n  <small>\n    <IconWrapper Icon={Io.IoIosMail} />\n    Contact Email\n  </small>\n);\n\nexport const DISCORD_FIELD_HEADER = (\n  <small>\n    <IconWrapper Icon={Fa.FaDiscord} />\n    Discord Username\n  </small>\n);\n\nexport const SKYPE_FIELD_HEADER = (\n  <small>\n    <IconWrapper Icon={Fa.FaSkype} />\n    Skype Username\n  </small>\n);\n","import axios from \"axios\";\nimport { API_POSTING_AVAILABILITY } from \"../../env_vars/api_url\";\n\nimport * as types from \"./types\";\n\nexport const setUserPostState = (\n  initUserPostingState: types.UserPostingState\n): types.SetUserPostingState => {\n  return {\n    type: types.SET_USER_POSTING_STATE,\n    payload: initUserPostingState\n  };\n};\n\nexport const incrementPostThisMonth = (): types.IncrementPostsThisMonth => {\n  return {\n    type: types.INCREMENT_POSTS_MADE\n  };\n};\n\nexport const incrementApplicationsThisMonth = (): types.IncrementApplicationsThisMonth => {\n  return {\n    type: types.INCREMENT_APPLICATIONS_MADE\n  };\n};\n\nexport const resetPostingState = (): types.ResetPostingState => {\n  return {\n    type: types.RESET_POSTING_STATE\n  };\n};\n\nexport const confirmUserViewedContacts = (): types.ConfirmUserViewedContacts => {\n  return {\n    type: types.CONFIRM_USER_VIEWED_CONTACTS\n  };\n};\n\nexport const fetchUserPostingState = (authToken: string | null) => {\n  return async (dispatch: Function) => {\n    if (authToken !== null) {\n      axios\n        .get(API_POSTING_AVAILABILITY, {\n          headers: { Authorization: `Token ${authToken}` }\n        })\n        .then(response => {\n          const data: types.UserPostingState = response.data;\n          dispatch(setUserPostState(data));\n        })\n        .catch(e => {\n          console.log(e);\n        });\n    }\n  };\n};\n","export const SET_USER_POSTING_STATE = \"setUserPostState\";\nexport const INCREMENT_POSTS_MADE = \"postCreated\";\nexport const INCREMENT_APPLICATIONS_MADE = \"applicationCreated\";\nexport const RESET_POSTING_STATE = \"resetPostingState\";\nexport const CONFIRM_USER_VIEWED_CONTACTS = \"confirmUserViewedContacts\";\n\nexport interface UserPostingState {\n  isVerifiedPodcaster: null;\n  hasCreatedContactDetails: boolean | null;\n  postsThisMonth: number | null;\n  applicationsThisMonth: number | null;\n}\n\nexport interface SetUserPostingState {\n  type: typeof SET_USER_POSTING_STATE;\n  payload: UserPostingState;\n}\n\nexport interface IncrementPostsThisMonth {\n  type: typeof INCREMENT_POSTS_MADE;\n}\n\nexport interface IncrementApplicationsThisMonth {\n  type: typeof INCREMENT_APPLICATIONS_MADE;\n}\n\nexport interface ResetPostingState {\n  type: typeof RESET_POSTING_STATE;\n}\n\nexport interface ConfirmUserViewedContacts {\n  type: typeof CONFIRM_USER_VIEWED_CONTACTS;\n}\n","import React from \"react\";\nimport { Card, Button } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { push } from \"connected-react-router\";\nimport * as Io from \"react-icons/io\";\n\nimport IconWrapper from \"../../../utils/elementWrappers/IconWrapper\";\nimport EllipsisTextWrapper from \"../../../utils/ellipsedText\";\nimport { contactDetailsEditLink } from \"../accountLinks\";\nimport {\n  EMAIL_FIELD_HEADER,\n  DISCORD_FIELD_HEADER,\n  SKYPE_FIELD_HEADER\n} from \"./fieldHeaders\";\nimport { ContactDetailsState } from \"./provider\";\nimport { useUserPostingStateSelector } from \"../../../../state/typedSelectors\";\nimport { confirmUserViewedContacts } from \"../../../../state/userPostingState/actions\";\n\ninterface Props {\n  contactDetails: ContactDetailsState;\n}\n\nexport default (props: Props) => {\n  const dispatch = useDispatch();\n  const { email, discord, skype } = props.contactDetails;\n\n  const { hasCreatedContactDetails } = useUserPostingStateSelector(\n    state => state.postingStateReducer\n  );\n\n  if (!hasCreatedContactDetails) {\n    dispatch(confirmUserViewedContacts());\n  }\n  return (\n    <Card>\n      <Card.Body>\n        <div>{EMAIL_FIELD_HEADER}</div>\n        <EllipsisTextWrapper>{email}</EllipsisTextWrapper>\n        <div>{DISCORD_FIELD_HEADER}</div>\n        <EllipsisTextWrapper>{discord}</EllipsisTextWrapper>\n        <div>{SKYPE_FIELD_HEADER}</div>\n        <EllipsisTextWrapper>{skype}</EllipsisTextWrapper>\n        <Button onClick={() => dispatch(push(contactDetailsEditLink.link))}>\n          <IconWrapper Icon={Io.IoMdCreate} /> Edit\n        </Button>\n      </Card.Body>\n    </Card>\n  );\n};\n","export const EMAIL = \"email\";\nexport const DISCORD = \"discord\";\nexport const SKYPE = \"skype\";\nexport const ERROR_DIV = \"contactDetailsErrorDiv\";\nexport const SUBMIT = \"contactDetailsSubmit\";\n","import axios from \"axios\";\nimport { push } from \"connected-react-router\";\n\nimport {\n  setSuccessAlerts,\n  setLoadingAlertVisibility\n} from \"../../../../../state/alertsState/alertActions\";\nimport { ContactDetailsState } from \"../../../../../state/userContactDetailsState/types\";\nimport {\n  hideAllInputErrorMessages,\n  displayInputErrorMessages,\n  displaySingleErrorMessageInErrorDiv,\n  toggleSubmitButton\n} from \"../../../../utils/formUtils\";\nimport * as fieldNames from \"./fieldNames\";\nimport { contactDetailsLink } from \"../../accountLinks\";\nimport { API_USER_CONTACT_DETAILS_VIEW } from \"../../../../../env_vars/api_url\";\n\nconst getFaultyInputFieldNames = (formState: ContactDetailsState) => {\n  const faultyInputFieldNames: Array<String> = [];\n  if (\n    !/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(`${formState.email}`)\n  ) {\n    faultyInputFieldNames.push(fieldNames.EMAIL);\n  }\n  return faultyInputFieldNames;\n};\n\nexport default (\n  event: React.FormEvent<HTMLFormElement>,\n  contactDetails: ContactDetailsState,\n  authToken: string,\n  reduxActionDispatch: Function,\n  setContactDetails: Function | null\n) => {\n  event.preventDefault();\n  const formKeys = [];\n  for (let key in fieldNames) {\n    formKeys.push(key);\n  }\n  hideAllInputErrorMessages(formKeys);\n  const faultyInputFieldNames = getFaultyInputFieldNames(contactDetails);\n  if (faultyInputFieldNames.length > 0) {\n    displayInputErrorMessages(faultyInputFieldNames);\n  } else {\n    const registrationPayload: ContactDetailsState = contactDetails;\n    toggleSubmitButton(fieldNames.SUBMIT);\n    (document.getElementById(fieldNames.ERROR_DIV) as HTMLElement).innerHTML =\n      \"\";\n    reduxActionDispatch(setLoadingAlertVisibility(\"loading\"));\n    axios\n      .post(API_USER_CONTACT_DETAILS_VIEW, registrationPayload, {\n        headers: { Authorization: `Token ${authToken}` }\n      })\n      .then(response => {\n        reduxActionDispatch(push(contactDetailsLink.link));\n        reduxActionDispatch(\n          setSuccessAlerts([`Your contact details have been updated.`])\n        );\n        if (setContactDetails !== null) {\n          setContactDetails(contactDetails);\n        }\n      })\n      .catch((error: any) => {\n        displaySingleErrorMessageInErrorDiv(\n          fieldNames.ERROR_DIV,\n          error.reponse.data\n        );\n        toggleSubmitButton(fieldNames.SUBMIT);\n      })\n      .finally(() =>\n        reduxActionDispatch(setLoadingAlertVisibility(\"finishing\"))\n      );\n  }\n};\n","import React, { useState } from \"react\";\nimport { Card, Form, Button } from \"react-bootstrap\";\nimport { push } from \"connected-react-router\";\nimport { useDispatch } from \"react-redux\";\nimport * as Io from \"react-icons/io\";\nimport * as Md from \"react-icons/md\";\n\nimport {\n  EMAIL_FIELD_HEADER,\n  DISCORD_FIELD_HEADER,\n  SKYPE_FIELD_HEADER\n} from \"../fieldHeaders\";\nimport { useUserAuthSelector } from \"../../../../../state/typedSelectors\";\nimport { ContactDetailsState } from \"../../../../../state/userContactDetailsState/types\";\nimport { contactDetailsLink } from \"../../accountLinks\";\nimport { handleInputChange } from \"../../../../utils/formUtils\";\nimport formSubmit from \"./submission\";\nimport IconWrapper from \"../../../../utils/elementWrappers/IconWrapper\";\nimport * as fieldNames from \"./fieldNames\";\n\ninterface Props {\n  contactDetails: ContactDetailsState;\n  setContactDetails: Function | null;\n}\n\nexport default (props: Props) => {\n  const [contactDetails, setContactDetails] = useState<ContactDetailsState>(\n    props.contactDetails\n  );\n  const updateFormElement = (e: React.FormEvent<HTMLInputElement>) =>\n    handleInputChange(e, contactDetails, setContactDetails);\n  const authToken = useUserAuthSelector(\n    state => state.userAuthReducer.authToken\n  );\n\n  const dispatch = useDispatch();\n  return props.setContactDetails === null ? null : (\n    <Card>\n      <Card.Body>\n        <Form\n          onSubmit={(e: React.FormEvent<HTMLFormElement>) =>\n            formSubmit(\n              e,\n              contactDetails,\n              `${authToken}`,\n              dispatch,\n              props.setContactDetails\n            )\n          }\n        >\n          <Form.Group controlId={fieldNames.EMAIL}>\n            <Form.Label>{EMAIL_FIELD_HEADER}</Form.Label>\n            <Form.Control\n              name={fieldNames.EMAIL}\n              type=\"email\"\n              placeholder=\"Enter email\"\n              value={`${contactDetails.email}`}\n              onChange={updateFormElement}\n            />\n            <Form.Text\n              className=\"d-none text-danger\"\n              id={fieldNames.EMAIL + \"-error\"}\n            >\n              Invalid Email\n            </Form.Text>\n          </Form.Group>\n          <Form.Group controlId={fieldNames.DISCORD}>\n            <Form.Label>{DISCORD_FIELD_HEADER}</Form.Label>\n            <Form.Control\n              name={fieldNames.DISCORD}\n              type=\"text\"\n              placeholder=\"Enter discord username\"\n              value={`${contactDetails.discord}`}\n              onChange={updateFormElement}\n            />\n          </Form.Group>\n          <Form.Group controlId={fieldNames.SKYPE}>\n            <Form.Label>{SKYPE_FIELD_HEADER}</Form.Label>\n            <Form.Control\n              name={fieldNames.SKYPE}\n              type=\"text\"\n              placeholder=\"Enter skype username\"\n              value={`${contactDetails.skype}`}\n              onChange={updateFormElement}\n            />\n          </Form.Group>\n          <Form.Group controlId={fieldNames.SUBMIT} className=\"mb-0 d-flex\">\n            <Button id={fieldNames.SUBMIT} type=\"submit\" className=\"mr-2\">\n              <IconWrapper Icon={Io.IoIosSave} /> Save\n            </Button>\n            <Button\n              onClick={() => dispatch(push(contactDetailsLink.link))}\n              variant=\"outline-secondary\"\n            >\n              <IconWrapper Icon={Md.MdCancel} /> Cancel\n            </Button>\n            <div id={fieldNames.ERROR_DIV}>{/* errors inserted here */}</div>\n          </Form.Group>\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport axios from \"axios\";\n\nimport Loader from \"../../../utils/loader\";\nimport ContactDetailsDisplay from \"./view\";\nimport { API_USER_CONTACT_DETAILS_VIEW } from \"../../../../env_vars/api_url\";\nimport ContactDetailsForm from \"./editContactDetailsForm/form\";\nimport { contactDetailsEditLink, contactDetailsLink } from \"../accountLinks\";\nimport { useUserAuthSelector } from \"../../../../state/typedSelectors\";\nimport { setLoadingAlertVisibility } from \"../../../../state/alertsState/alertActions\";\n\nexport interface ContactDetailsState {\n  email: string | null;\n  discord: string | null;\n  skype: string | null;\n}\n\nexport default () => {\n  const dispatch = useDispatch();\n\n  const { authToken } = useUserAuthSelector(state => state.userAuthReducer);\n\n  const [\n    contactDetails,\n    setContactDetails\n  ] = useState<ContactDetailsState | null>(null);\n  const [loading, setLoading] = useState(false);\n\n  if (contactDetails === null && loading === false) {\n    setLoading(true);\n    dispatch(setLoadingAlertVisibility(\"loading\"));\n    axios\n      .get(API_USER_CONTACT_DETAILS_VIEW, {\n        headers: { Authorization: \"Token \" + authToken }\n      })\n      .then(response => {\n        const contactDetails: ContactDetailsState = response.data;\n        setContactDetails(contactDetails);\n      })\n      .catch(error => console.log(error))\n      .finally(() => dispatch(setLoadingAlertVisibility(\"finishing\")));\n  } else {\n    return (\n      <div>\n        <h1>Contact Details</h1>\n        {contactDetails === null ? (\n          <Loader />\n        ) : (\n          <div>\n            <small>These will only be shared with your permission.</small>\n            <Switch>\n              <Route\n                exact\n                path={contactDetailsEditLink.link}\n                component={ContactDetailsForm}\n              >\n                <ContactDetailsForm\n                  setContactDetails={setContactDetails}\n                  contactDetails={contactDetails}\n                />\n              </Route>\n              <Route path={contactDetailsLink.link}>\n                <ContactDetailsDisplay contactDetails={contactDetails} />\n              </Route>\n            </Switch>\n          </div>\n        )}\n      </div>\n    );\n  }\n};\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\n\nimport { useUserAuthSelector } from \"../../../state/typedSelectors\";\nimport {\n  getAccountLinksAsArray,\n  accountBaseRoute,\n  settingsLink,\n  myPodcastLink,\n  contactDetailsLink\n} from \"./accountLinks\";\nimport NavSidebox from \"../../navigation/navSidebox\";\n\nimport AccountDetailsView from \"./accountCredentials\";\nimport MyPodcastView from \"./myPodcasts/myPodcastView\";\nimport ContactDetailsView from \"./contactDetails/provider\";\n\nexport default () => {\n  const username = useUserAuthSelector(state => state.userAuthReducer.username);\n  return (\n    <Route path={accountBaseRoute.link}>\n      <div className=\"row\">\n        <div className=\"col-md-4 d-none d-md-block text-center\">\n          <NavSidebox\n            boxHeader={{\n              title: accountBaseRoute.displayName,\n              icon: accountBaseRoute.icon\n            }}\n            links={getAccountLinksAsArray(username)}\n          />\n        </div>\n        <div className=\"col-md-8\">\n          <Route path={settingsLink.link} component={AccountDetailsView} />\n          <Route path={myPodcastLink.link} component={MyPodcastView} />\n          <Route\n            path={contactDetailsLink.link}\n            component={ContactDetailsView}\n          />\n        </div>\n      </div>\n    </Route>\n  );\n};\n","import styled from \"styled-components\";\n\nexport default styled.div`\n  max-width: 30rem;\n  margin: auto;\n`;\n","import React from \"react\";\n\nexport default () => (\n  <div>\n    <h1>Impressum und Datenschuterklärung</h1>\n    <hr></hr>\n    <section>\n      <h2>Impressum</h2>\n      <h3>Angaben gemäß § 5 TMG</h3>\n      <p>\n        Friedrich-von-der-Leyen St. 4<br />\n        40667 Meerbusch\n      </p>\n      <h3>Vertreten durch</h3>\n      <p>Marc Philippe Beaujean</p>\n      <h3>Kontakt</h3>\n      <p>Telefon: Nach Anfrage</p>\n      <p>E-Mail: marcphilippebeaujean@gmail.com</p>\n      <h3>Haftung für Links</h3>\n      <p>\n        Unser Angebot enthält Links zu externen Webseiten Dritter, auf deren\n        Inhalte wir keinen Einfluss haben. Deshalb können wir für diese fremden\n        Inhalte auch keine Gewähr übernehmen. Für die Inhalte der verlinkten\n        Seiten ist stets der jeweilige Anbieter oder Betreiber der Seiten\n        verantwortlich. Die verlinkten Seiten wurden zum Zeitpunkt der\n        Verlinkung auf mögliche Rechtsverstöße überprüft. Rechtswidrige Inhalte\n        waren zum Zeitpunkt der Verlinkung nicht erkennbar. Eine permanente\n        inhaltliche Kontrolle der verlinkten Seiten ist jedoch ohne konkrete\n        Anhaltspunkte einer Rechtsverletzung nicht zumutbar. Bei Bekanntwerden\n        von Rechtsverletzungen werden wir derartige Links umgehend entfernen.\n      </p>\n      <h3>Urheberrecht</h3>\n      <p>\n        Die durch die Seitenbetreiber erstellten Inhalte und Werke auf diesen\n        Seiten unterliegen dem deutschen Urheberrecht. Die Vervielfältigung,\n        Bearbeitung, Verbreitung und jede Art der Verwertung außerhalb der\n        Grenzen des Urheberrechtes bedürfen der schriftlichen Zustimmung des\n        jeweiligen Autors bzw. Erstellers. Downloads und Kopien dieser Seite\n        sind nur für den privaten, nicht kommerziellen Gebrauch gestattet.\n        Soweit die Inhalte auf dieser Seite nicht vom Betreiber erstellt wurden,\n        werden die Urheberrechte Dritter beachtet. Insbesondere werden Inhalte\n        Dritter als solche gekennzeichnet. Sollten Sie trotzdem auf eine\n        Urheberrechtsverletzung aufmerksam werden, bitten wir um einen\n        entsprechenden Hinweis. Bei Bekanntwerden von Rechtsverletzungen werden\n        wir derartige Inhalte umgehend entfernen.Quelle:\n        <a href=\"https://www.e-recht24.de\">https://www.e-recht24.de</a>\n      </p>\n    </section>\n    <section>\n      <h2>Datenschuterklärung</h2>\n      <p>\n        Die Betreiber dieser Seiten nehmen den Schutz Ihrer persönlichen Daten\n        sehr ernst. Wir behandeln Ihre personenbezogenen Daten vertraulich und\n        entsprechend der gesetzlichen Datenschutzvorschriften sowie dieser\n        Datenschutzerklärung. Die Nutzung unserer Webseite ist in der Regel ohne\n        Angabe personenbezogener Daten möglich. Soweit auf unseren Seiten\n        personenbezogene Daten (beispielsweise Name, Anschrift oder\n        E-Mail-Adressen) erhoben werden, erfolgt dies, soweit möglich, stets auf\n        freiwilliger Basis. Diese Daten werden ohne Ihre ausdrückliche\n        Zustimmung nicht an Dritte weitergegeben. Wir weisen darauf hin, dass\n        die Datenübertragung im Internet (z.B. bei der Kommunikation per E-Mail)\n        Sicherheitslücken aufweisen kann. Ein lückenloser Schutz der Daten vor\n        dem Zugriff durch Dritte ist nicht möglich.\n      </p>\n      <h3>Cookies</h3>\n      <p>\n        Die Internetseiten verwenden teilweise so genannte Cookies. Cookies\n        richten auf Ihrem Rechner keinen Schaden an und enthalten keine Viren.\n        Cookies dienen dazu, unser Angebot nutzerfreundlicher, effektiver und\n        sicherer zu machen. Cookies sind kleine Textdateien, die auf Ihrem\n        Rechner abgelegt werden und die Ihr Browser speichert. Die meisten der\n        von uns verwendeten Cookies sind so genannte „Session-Cookies“. Sie\n        werden nach Ende Ihres Besuchs automatisch gelöscht. Andere Cookies\n        bleiben auf Ihrem Endgerät gespeichert, bis Sie diese löschen. Diese\n        Cookies ermöglichen es uns, Ihren Browser beim nächsten Besuch\n        wiederzuerkennen. Sie können Ihren Browser so einstellen, dass Sie über\n        das Setzen von Cookies informiert werden und Cookies nur im Einzelfall\n        erlauben, die Annahme von Cookies für bestimmte Fälle oder generell\n        ausschließen sowie das automatische Löschen der Cookies beim Schließen\n        des Browser aktivieren. Bei der Deaktivierung von Cookies kann die\n        Funktionalität dieser Website eingeschränkt sein.\n      </p>\n      <h3>Server-Log Files</h3>\n      <p>\n        Der Provider der Seiten erhebt und speichert automatisch Informationen\n        in so genannten Server-Log Files, die Ihr Browser automatisch an uns\n        übermittelt. Dies sind:\n      </p>\n      <ul>\n        <li>Browsertyp und Browserversion</li>\n        <li>Verwendetes Betriebssystem</li>\n        <li>Referrer URL</li>\n        <li>Hostname des zugreifenden Rechners</li>\n        <li>Uhrzeit der Serveranfrage</li>\n      </ul>\n      <p>\n        Diese Daten sind nicht bestimmten Personen zuordenbar. Eine\n        Zusammenführung dieser Daten mit anderen Datenquellen wird nicht\n        vorgenommen. Wir behalten uns vor, diese Daten nachträglich zu prüfen,\n        wenn uns konkrete Anhaltspunkte für eine rechtswidrige Nutzung bekannt\n        werden.\n      </p>\n      <h3>Kontaktforumular</h3>\n      <p>\n        Wenn Sie uns per Kontaktformular/ Feedbackformular Anfragen zukommen\n        lassen, werden Ihre Angaben aus dem Anfrageformular inklusive der von\n        Ihnen dort angegebenen Kontaktdaten zwecks Bearbeitung der Anfrage und\n        für den Fall von Anschlussfragen bei uns gespeichert. Diese Daten geben\n        wir nicht ohne Ihre Einwilligung weiter.\n      </p>\n      <h3>Newsletterdaten</h3>\n      <p>\n        Wenn Sie den auf der Webseite angebotenen Newsletter beziehen möchten,\n        benötigen wir von Ihnen eine E-Mail-Adresse sowie Informationen, welche\n        uns die Überprüfung gestatten, dass Sie der Inhaber der angegebenen\n        E-Mail-Adresse sind und mit dem Empfang des Newsletters einverstanden\n        sind. Weitere Daten werden nicht erhoben. Diese Daten verwenden wir\n        ausschließlich für den Versand der angeforderten Informationen und geben\n        sie nicht an Dritte weiter. Die erteilte Einwilligung zur Speicherung\n        der Daten, der E-Mail-Adresse sowie deren Nutzung zum Versand des\n        Newsletters können Sie jederzeit widerrufen, etwa über den\n        \"Austragen\"-Link im Newsletter.\n      </p>\n      <h3>Export und Löschung persönlischer Daten</h3>\n      <p>\n        Sie können bei uns einen Export sowie die Löschung der von uns über Sie\n        gespeicherten Daten verlangen. Senden Sie hierzu einfach eine formlose\n        Anfrage marcphilippebeaujean@gmail.com\n      </p>\n      <h3>Cookie Browser Plugin</h3>\n      <p>\n        Browser plugin Sie können die Speicherung der Cookies durch eine\n        entsprechende Einstellung Ihrer Browser-Software verhindern; wir weisen\n        Sie jedoch darauf hin, dass Sie in diesem Fall gegebenenfalls nicht\n        sämtliche Funktionen dieser Website vollumfänglich werden nutzen können.\n        Sie können darüber hinaus die Erfassung der durch den Cookie erzeugten\n        und auf Ihre Nutzung der Website bezogenen Daten (inkl. Ihrer\n        IP-Adresse) an Google sowie die Verarbeitung dieser Daten durch Google\n        verhindern, indem Sie das unter dem folgenden Link verfügbare Browser-\n        Plugin herunterladen und installieren:{\" \"}\n        <a href=\"https://tools.google.com/dlpage/gaoptout?hl=de\">\n          https://tools.google.com/dlpage/gaoptout?hl=de\n        </a>\n      </p>\n      <h3>Datenschuterklärung für die Nutzung von Google Analytics</h3>\n      <p>\n        Diese Website nutzt Funktionen des Webanalysedienstes Google Analytics.\n        Anbieter ist die Google Inc., 1600 Amphitheatre Parkway Mountain View,\n        CA 94043, USA. Google Analytics verwendet so genannte \"Cookies\". Das\n        sind Textdateien, die auf Ihrem Computer gespeichert werden und die eine\n        Analyse der Benutzung der Website durch Sie ermöglichen. Die durch den\n        Cookie erzeugten Informationen über Ihre Benutzung dieser Website werden\n        in der Regel an einen Server von Google in den USA übertragen und dort\n        gespeichert. Mehr Informationen zum Umgang mit Nutzerdaten bei Google\n        Analytics finden Sie in der Datenschutzerklärung von Google:{\" \"}\n        <a href=\"https://support.google.com/analytics/answer/6004245?hl=en\">\n          https://support.google.com/analytics/answer/6004245?hl=en\n        </a>\n      </p>\n      <h3>Wiederspruch gegen Datenerfassung</h3>\n      Sie können die Erfassung Ihrer Daten durch Google Analytics verhindern,\n      indem Sie auf folgenden Link klicken. Es wird ein Opt-Out-Cookie gesetzt,\n      der die Erfassung Ihrer Daten bei zukünftigen Besuchen dieser Website\n      verhindert.\n      <h3>Auftragsdatenverarbeitung</h3>\n      <p>\n        Wir haben mit Google einen Vertrag zur Auftragsdatenverarbeitung\n        abgeschlossen und setzen die strengen Vorgaben der deutschen\n        Datenschutzbehörden bei der Nutzung von Google Analytics vollständig um.\n      </p>\n      <h3>Datenschuterklärung für die Nutzung von YouTube</h3>\n      <p>\n        Unsere Webseite nutzt Plugins der von Google betriebenen Seite YouTube.\n        Betreiber der Seiten ist die YouTube, LLC, 901 Cherry Ave., San Bruno,\n        CA 94066, USA. Wenn Sie eine unserer mit einem YouTube-Plugin\n        ausgestatteten Seiten besuchen, wird eine Verbindung zu den Servern von\n        YouTube hergestellt. Dabei wird dem Youtube-Server mitgeteilt, welche\n        unserer Seiten Sie besucht haben. Wenn Sie in Ihrem YouTube-Account\n        eingeloggt sind ermöglichen Sie YouTube, Ihr Surfverhalten direkt Ihrem\n        persönlichen Profil zuzuordnen. Dies können Sie verhindern, indem Sie\n        sich aus Ihrem YouTube-Account ausloggen. Weitere Informationen zum\n        Umgang von Nutzerdaten finden Sie in der Datenschutzerklärung von\n        YouTube unter:{\" \"}\n        <a href=\"https://www.google.com/intl/en/policies/privacy\">\n          https://www.google.com/intl/en/policies/privacy.\n        </a>\n      </p>\n      <h3>SSL Verschlüsselung</h3>\n      <p>\n        Diese Seite nutzt aus Gründen der Sicherheit und zum Schutz der\n        Übertragung vertraulicher Inhalte, wie zum Beispiel der Anfragen, die\n        Sie an uns als Seitenbetreiber senden, eine SSL-Verschlüsselung. Eine\n        verschlüsselte Verbindung erkennen Sie daran, dass die Adresszeile des\n        Browsers von \"http://\" auf \"https://\" wechselt und an dem Schloss-Symbol\n        in Ihrer Browserzeile. Wenn die SSL Verschlüsselung aktiviert ist,\n        können die Daten, die Sie an uns übermitteln, nicht von Dritten\n        mitgelesen werden.\n      </p>\n    </section>\n    <p>\n      <b>Quelle:</b>{\" \"}\n      <a href=\"https://www.e-recht24.de/muster-datenschutzerklaerung.html\">\n        https://www.e-recht24.de/muster-datenschutzerklaerung.html.\n      </a>{\" \"}\n    </p>\n  </div>\n);\n","import React from \"react\";\n\nexport default () => (\n  <div>\n    <h1>Imprint und Data Protection</h1>\n    <hr></hr>\n    <section>\n      <h2>Imprint</h2>\n      <h3>Accounts according to § 5 TMG</h3>\n      <p>\n        Friedrich-von-der-Leyen St. 4<br />\n        40667 Meerbusch\n      </p>\n      <h3>Represented by</h3>\n      <p>Marc Philippe Beaujean</p>\n      <h3>Contact</h3>\n      <p>Telefon: On Request</p>\n      <p>E-Mail: marcphilippebeaujean@gmail.com</p>\n      <h3>Liability for Content</h3>\n      <p>\n        Obligations to remove or block the use of information under general law\n        remain unaffected. A liability in this regard, however, is only possible\n        from the date of knowledge of a specific infringement. Upon notification\n        of appropriate violations, we will remove this content immediately.\n      </p>\n      <h3>Liability for Links</h3>\n      <p>\n        Our offer contains links to external websites of third parties on whose\n        contents we have no influence. Therefore, we can not assume any\n        liability for these external contents. The respective provider or\n        operator of the pages is always responsible for the contents of the\n        linked pages. The linked pages were checked for possible legal\n        violations at the time of linking. Illegal content was not recognizable\n        at the time of linking. However, a permanent content control of the\n        linked pages is not reasonable without concrete evidence of an\n        infringement. Upon notification of violations, we will remove such links\n        immediately.\n      </p>\n      <h3>Copyright</h3>\n      <p>\n        The content and works on these pages created by the site operators are\n        subject to German copyright law. The reproduction, processing,\n        distribution and any kind of exploitation outside the limits of\n        copyright require the written consent of the respective author or\n        creator. Downloads and copies of this site are for private,\n        non-commercial use only. As far as the contents on this side were not\n        created by the operator, the copyrights of third parties are considered.\n        In particular contents of third parties are marked as such. If you\n        should still be aware of a copyright infringement, we ask for a note.\n        Upon notification of violations, we will remove such content\n        immediately. Source:\n        <a href=\"https://www.e-recht24.de\">https://www.e-recht24.de</a>\n      </p>\n    </section>\n    <section>\n      <h2>Data Protection</h2>\n      <p>\n        The operators of these pages take the protection of your personal data\n        very seriously. We treat your personal data confidentially and in\n        accordance with the statutory data protection regulations and this\n        privacy policy. The use of our website is usually possible without\n        providing personal information. As far as on our sides personal data\n        (for example name, address or E-Mail addresses) are raised, this takes\n        place, as far as possible, always on voluntary basis. These data will\n        not be disclosed to third parties without your explicit consent. Please\n        note that data transmission over the Internet (for example, when\n        communicating via e-mail) may have security vulnerabilities. A complete\n        protection of the data from access by third parties is not possible.\n      </p>\n      <h3>Cookies</h3>\n      <p>\n        The internet pages partly use so-called cookies. Cookies do not harm\n        your computer and do not contain viruses. Cookies serve to make our\n        offer more user-friendly, effective and secure. Cookies are small text\n        files that are stored on your computer and stored by your browser. Most\n        of the cookies we use are so-called \"session cookies\". They are\n        automatically deleted after your visit. Other cookies remain stored on\n        your device until you delete them. These cookies allow us to recognize\n        your browser the next time you visit. You can set your browser so that\n        you are informed about the setting of cookies and allow cookies only in\n        individual cases, the acceptance of cookies for certain cases or\n        generally exclude and enable the automatic deletion of cookies when\n        closing the browser. Disabling cookies may limit the functionality of\n        this website.\n      </p>\n      <h3>Server-Log Files</h3>\n      <p>\n        The provider of the pages automatically collects and stores information\n        in so-called server log files, which your browser automatically\n        transmits to us. These are:\n      </p>\n      <ul>\n        <li>Browsertype and Browserversion</li>\n        <li>Verwendetes Betriebssystem</li>\n        <li>Referrer URL</li>\n        <li>Hostname des zugreifenden Rechners</li>\n        <li>Uhrzeit der Serveranfrage</li>\n      </ul>\n      <p>\n        These data can not be assigned to specific persons. A merge of this data\n        with other data sources will not be done. We reserve the right to check\n        this data retrospectively, if we become aware of specific indications\n        for illegal use.\n      </p>\n      <h3>Contact Form</h3>\n      <p>\n        If you send us inquiries via the contact form/ feedback form, your\n        details from the inquiry form, including the contact details you\n        provided there, will be stored in order to process the request and in\n        case of follow-up questions. We will not share this information without\n        your consent.\n      </p>\n      <h3>Newsletter Data</h3>\n      <p>\n        If you would like to receive the newsletter offered on the website, we\n        need an e-mail address from you, as well as information that allows us\n        to verify that you are the owner of the specified e-mail address and\n        that you agree to receive the newsletter , Further data is not\n        collected. We use this data exclusively for the delivery of the\n        requested information and do not pass it on to third parties. The\n        granted consent to the storage of the data, the e-mail address and their\n        use for sending the newsletter can be revoked at any time, for example\n        via the \"unsubscribe\" link in the newsletter.\n      </p>\n      <h3>Export and Deletion of personal Data</h3>\n      <p>\n        You can request a data export of your data saved by us and you can also\n        request us to delete any data saved about you. Please send your informal\n        request to marcphilippebeaujean@gmail.com\n      </p>\n      <h3>Cookie Browser Plugin</h3>\n      <p>\n        You can prevent the storage of cookies by a corresponding setting of\n        your browser software; however, please note that if you do this, you may\n        not be able to use all the features of this website to the fullest\n        extent possible. In addition, you can prevent the collection by Google\n        of the data generated by the cookie and related to your use of the\n        website (including your IP address) as well as the processing of this\n        data by Google by downloading the browser plug-in available under the\n        following link and install:{\" \"}\n        <a href=\"https://tools.google.com/dlpage/gaoptout?hl=de\">\n          https://tools.google.com/dlpage/gaoptout?hl=de\n        </a>\n      </p>\n      <h3>Privacy Policy for the use of Google Analytics</h3>\n      <p>\n        This website uses functions of the web analytics service Google\n        Analytics. Provider is Google Inc., 1600 Amphitheater Parkway Mountain\n        View, CA 94043, USA. Google Analytics uses so-called \"cookies\". These\n        are text files that are stored on your computer and that allow an\n        analysis of the use of the website by you. The information generated by\n        the cookie about your use of this website is usually transmitted to a\n        Google server in the USA and stored there. For more information on how\n        to handle user data on Google Analytics, please refer to the Google\n        Privacy Policy:{\" \"}\n        <a href=\"https://support.google.com/analytics/answer/6004245?hl=en\">\n          https://support.google.com/analytics/answer/6004245?hl=en\n        </a>\n      </p>\n      <h3>Opposition to Data Collection</h3>\n      You can prevent the collection of your data by Google Analytics by\n      clicking on the following link. An opt-out cookie will be set which\n      prevents the collection of your data on future visits to this website.\n      <h3>Order processing</h3>\n      <p>\n        We have entered into a contract data processing agreement with Google\n        and fully implement the strict requirements of the German data\n        protection authorities when using Google Analytics.\n      </p>\n      <h3>Privacy Police for the Use of YouTube</h3>\n      <p>\n        Our website uses plugins from the Google-powered YouTube page. Site\n        operator is YouTube, LLC, 901 Cherry Ave., San Bruno, CA 94066, USA.\n        When you visit one of our YouTube plug-in-enabled sites, you will be\n        connected to the servers of YouTube. The Youtube server will be informed\n        which of our pages you visited. If you're logged in to your YouTube\n        account, YouTube allows you to associate your browsing behavior directly\n        with your personal profile. You can prevent this by logging out of your\n        YouTube account. For more information on how to handle user data, please\n        refer to the YouTube Privacy Policy at{\" \"}\n        <a href=\"https://www.google.com/intl/en/policies/privacy\">\n          https://www.google.com/intl/en/policies/privacy.\n        </a>\n      </p>\n      <h3>SSL Encryption</h3>\n      <p>\n        This site uses SSL encryption for security reasons and to protect the\n        transmission of sensitive content, such as the requests you send to us\n        as the site operator. You can recognize an encrypted connection by\n        changing the address line of the browser from \"http: //\" to \"https: //\"\n        and the lock symbol in your browser line. If SSL encryption is enabled,\n        the data you submit to us can not be read by third parties.\n      </p>\n    </section>\n    <p>\n      <b>Source:</b>{\" \"}\n      <a href=\"https://www.e-recht24.de/muster-datenschutzerklaerung.html\">\n        https://www.e-recht24.de/muster-datenschutzerklaerung.html.\n      </a>{\" \"}\n    </p>\n  </div>\n);\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport DatenschutzErklaerung from \"./datenschutzErklaerung\";\nimport DataPolicy from \"./dataPolicyAndImprint\";\n\nexport const deDatenschutzLink = \"/datenschutz-und-impressum\";\nexport const enDatenschutzLink = \"/data-policy-and-imprint\";\n\n// Route that redirects the user to the home page if accessed while logged in (authorised)\nexport default () => {\n  return (\n    <React.Fragment>\n      <Switch>\n        <Route path={deDatenschutzLink} component={DatenschutzErklaerung} />\n        <Route path={enDatenschutzLink} component={DataPolicy} />\n      </Switch>\n    </React.Fragment>\n  );\n};\n","import * as Io from \"react-icons/io\";\nimport IconWrapper from \"../../utils/elementWrappers/IconWrapper\";\nimport React from \"react\";\nimport { LinkItem } from \"../../utils/navLinkUtils\";\n\nexport const home: LinkItem = {\n  link: \"/home\",\n  displayName: \"Home\",\n  icon: <IconWrapper Icon={Io.IoIosHome} />\n};\n\nexport const login: LinkItem = {\n  link: \"/login\",\n  displayName: \"Login\",\n  icon: <IconWrapper Icon={Io.IoIosLogIn} />\n};\n\nexport const register: LinkItem = {\n  link: \"/register\",\n  displayName: \"Sign Up\",\n  icon: <IconWrapper Icon={Io.IoIosPersonAdd} />\n};\n\nexport const logout: LinkItem = {\n  link: \"/home\",\n  displayName: \"Sign Out\",\n  icon: <IconWrapper Icon={Io.IoIosLogOut} />\n};\n","import React, { useState } from \"react\";\nimport { Form, Button, Card, InputGroup } from \"react-bootstrap\";\nimport * as Io from \"react-icons/io\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\n\nimport FormWrapper from \"../formWrapper\";\nimport { handleInputChange } from \"../../../utils/formUtils\";\nimport { enDatenschutzLink } from \"../../legal/legalRoutes\";\nimport handleSubmit from \"./submission\";\nimport {\n  USERNAME,\n  PASSWORD,\n  EMAIL,\n  LEGAL_AGREEMENT,\n  REPEATED_PASSWORD,\n  SUBMIT,\n  FORM_ID,\n  FORM_ERROR_DIV_ID,\n  FORM_SUCCESS_ID\n} from \"./fieldNames\";\nimport { login } from \"../userAccessLinks\";\n\nexport interface UserRegistrationForm {\n  [USERNAME]: string;\n  [PASSWORD]: string;\n  [REPEATED_PASSWORD]: string;\n  [EMAIL]: string;\n  [LEGAL_AGREEMENT]: boolean;\n}\n\nexport default () => {\n  const [formData, setFormData] = useState<UserRegistrationForm>({\n    [USERNAME]: \"\",\n    [PASSWORD]: \"\",\n    [REPEATED_PASSWORD]: \"\",\n    [EMAIL]: \"\",\n    [LEGAL_AGREEMENT]: false\n  });\n  const updateFormElement = (e: React.FormEvent<HTMLInputElement>) =>\n    handleInputChange(e, formData, setFormData);\n  const dispatch = useDispatch();\n  return (\n    <FormWrapper>\n      <Card>\n        <Card.Body>\n          <Card.Title>Register</Card.Title>\n          <Form\n            id={FORM_ID}\n            onSubmit={(e: React.FormEvent<HTMLFormElement>) =>\n              handleSubmit(e, formData, dispatch)\n            }\n          >\n            <Form.Group controlId={EMAIL}>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id={`${EMAIL}-prepend`}>\n                    <Io.IoMdMail />\n                  </InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  name={EMAIL}\n                  type=\"email\"\n                  placeholder=\"Email\"\n                  value={formData.email}\n                  onChange={updateFormElement}\n                />\n              </InputGroup>\n              <Form.Text className=\"d-none text-danger\" id={EMAIL + \"-error\"}>\n                Invalid Email\n              </Form.Text>\n            </Form.Group>\n\n            <Form.Group controlId={USERNAME}>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id={`${USERNAME}-prepend`}>\n                    <Io.IoMdPerson />\n                  </InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  name={USERNAME}\n                  type=\"text\"\n                  placeholder=\"Username\"\n                  value={formData.username}\n                  onChange={updateFormElement}\n                />\n              </InputGroup>\n              <Form.Text\n                className=\"d-none text-danger\"\n                id={USERNAME + \"-error\"}\n              >\n                Please choose a username that is at least six characters long\n                and contains no whitespace (tabs, spaces, etc.).\n              </Form.Text>\n            </Form.Group>\n            <Form.Group controlId={PASSWORD}>\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id={`${PASSWORD}-prepend`}>\n                    <Io.IoMdLock />\n                  </InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  name={PASSWORD}\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  value={formData.password}\n                  onChange={updateFormElement}\n                />\n              </InputGroup>\n              <Form.Text\n                className=\"d-none text-danger\"\n                id={PASSWORD + \"-error\"}\n              >\n                Please choose a safer password. It should be at least 6\n                characters long, contain lower and uppercase letters as well as\n                at least one number.\n              </Form.Text>\n            </Form.Group>\n            {/* \n          <Form.Group controlId={REPEATED_PASSWORD}>\n            <Form.Label>Repeat Password</Form.Label>\n            <Form.Control\n              name={REPEATED_PASSWORD}\n              type=\"password\"\n              placeholder=\"Password\"\n              value={formData.repeatPassword}\n              onChange={updateFormElement}\n            />\n            <Form.Text\n              className=\"d-none text-danger\"\n              id={REPEATED_PASSWORD + \"-error\"}\n            >\n              Passwords don't match\n            </Form.Text>\n          </Form.Group> \n          */}\n            <Form.Group controlId={LEGAL_AGREEMENT}>\n              <InputGroup>\n                <Form.Check\n                  name={LEGAL_AGREEMENT}\n                  type=\"checkbox\"\n                  checked={formData.legalAgreement}\n                  onChange={updateFormElement}\n                />\n                <Form.Text>\n                  I agree to the <Link to={enDatenschutzLink}>Data Policy</Link>{\" \"}\n                  and to using the service responsibly.\n                </Form.Text>\n              </InputGroup>\n              <Form.Text\n                className=\"d-none text-danger\"\n                id={LEGAL_AGREEMENT + \"-error\"}\n              >\n                You need to agree to the Terms of use for our Service\n              </Form.Text>\n            </Form.Group>\n            <Form.Group controlId=\"submit\">\n              <Button variant=\"primary\" type=\"submit\" id={SUBMIT}>\n                Submit\n              </Button>\n              <div id={FORM_ERROR_DIV_ID}>{/* errors inserted here */}</div>\n              <Form.Text className=\"d-none text-success\" id={FORM_SUCCESS_ID}>\n                Sign up successful - check your email!\n              </Form.Text>\n            </Form.Group>\n          </Form>\n          <Card.Text>\n            Already have an account?{\" \"}\n            <Link to={login.link}>{login.displayName}</Link>\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    </FormWrapper>\n  );\n};\n","export const USERNAME = \"username\";\nexport const PASSWORD = \"password\";\nexport const REPEATED_PASSWORD = \"repeatPassword\";\nexport const EMAIL = \"email\";\nexport const LEGAL_AGREEMENT = \"legalAgreement\";\nexport const SUBMIT = \"submit\";\nexport const FORM_ID = \"registrationForm\";\nexport const FORM_ERROR_DIV_ID = \"form-errors\";\nexport const FORM_SUCCESS_ID = \"form-success\";\n","import axios from \"axios\";\nimport { push } from \"connected-react-router\";\nimport { login } from \"../userAccessLinks\";\nimport {\n  setSuccessAlerts,\n  setLoadingAlertVisibility\n} from \"../../../../state/alertsState/alertActions\";\n\nimport {\n  hideAllInputErrorMessages,\n  displayInputErrorMessages,\n  displayServerErrorMessagesInErrorDiv,\n  toggleSubmitButton\n} from \"../../../utils/formUtils\";\nimport {\n  USERNAME,\n  PASSWORD,\n  EMAIL,\n  LEGAL_AGREEMENT,\n  SUBMIT,\n  FORM_ERROR_DIV_ID\n} from \"./fieldNames\";\nimport { UserRegistrationForm } from \"./form\";\nimport { API_REGISTRATION_URL } from \"../../../../env_vars/api_url\";\n\ninterface RegistrationPayload {\n  username: string;\n  password1: string;\n  password2: string;\n  email: string;\n}\n\nconst getFaultyInputFieldNames = (formState: UserRegistrationForm) => {\n  const faultyInputFieldNames: Array<String> = [];\n  if (formState.username.length < 6 || /\\s/g.test(formState.username)) {\n    faultyInputFieldNames.push(USERNAME);\n  }\n  if (!/^(?=.*[a-z])(?=.*[A-Z]).{6,}$/.test(formState.password)) {\n    faultyInputFieldNames.push(PASSWORD);\n  }\n  if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(formState.email)) {\n    faultyInputFieldNames.push(EMAIL);\n  }\n  //if (formState.password !== formState.repeatPassword) {\n  //  faultyInputFieldNames.push(REPEATED_PASSWORD);\n  //}\n  if (!formState.legalAgreement) {\n    faultyInputFieldNames.push(LEGAL_AGREEMENT);\n  }\n  return faultyInputFieldNames;\n};\n\nexport default (\n  event: React.FormEvent<HTMLFormElement>,\n  formInputValues: UserRegistrationForm,\n  reduxActionDispatch: Function\n) => {\n  event.preventDefault();\n  const formKeys = [];\n  for (let key in formInputValues) {\n    formKeys.push(key);\n  }\n  hideAllInputErrorMessages(formKeys);\n  const faultyInputFieldNames = getFaultyInputFieldNames(formInputValues);\n  if (faultyInputFieldNames.length > 0) {\n    displayInputErrorMessages(faultyInputFieldNames);\n  } else {\n    const registrationPayload: RegistrationPayload = {\n      username: formInputValues.username,\n      email: formInputValues.email,\n      password1: formInputValues.password,\n      password2: formInputValues.password\n    };\n    toggleSubmitButton(SUBMIT);\n    (document.getElementById(FORM_ERROR_DIV_ID) as HTMLElement).innerHTML = \"\";\n    reduxActionDispatch(setLoadingAlertVisibility(\"loading\"));\n    axios\n      .post(API_REGISTRATION_URL, registrationPayload)\n      .then(response => {\n        reduxActionDispatch(push(login.link));\n        reduxActionDispatch(\n          setSuccessAlerts([\n            `We sent an email to ${formInputValues.email} - please confirm it to activate your account!`\n          ])\n        );\n      })\n      .catch((error: any) =>\n        displayServerErrorMessagesInErrorDiv(FORM_ERROR_DIV_ID, error.reponse)\n      )\n      .finally(() =>\n        reduxActionDispatch(setLoadingAlertVisibility(\"finishing\"))\n      );\n  }\n};\n","import axios from \"axios\";\nimport * as types from \"./userAuthTypes\";\nimport {\n  AUTH_TOKEN_KEY,\n  USERNAME_KEY,\n  LOGIN_TIME_KEY\n} from \"../stateStorageKeys\";\nimport { resetPostingState } from \"../userPostingState/actions\";\nimport { API_LOGOUT_URL } from \"../../env_vars/api_url\";\n\nexport const startUserSession = (\n  authToken: string,\n  username: string\n): types.StartUserSessionAction => {\n  localStorage.setItem(AUTH_TOKEN_KEY, authToken);\n  localStorage.setItem(USERNAME_KEY, username);\n  localStorage.setItem(LOGIN_TIME_KEY, `${new Date()}`);\n  return {\n    type: types.START_USER_SESSION,\n    payload: {\n      username: username,\n      authToken: authToken,\n      sessionActive: true,\n      loginTime: `${new Date()}`\n    }\n  };\n};\n\nconst endUserSession = (): types.EndUserSessionAction => {\n  localStorage.removeItem(AUTH_TOKEN_KEY);\n  localStorage.removeItem(USERNAME_KEY);\n  localStorage.removeItem(LOGIN_TIME_KEY);\n  return {\n    type: types.END_USER_SESSION\n  };\n};\n\nexport const sendLogoutRequest = (authToken: string | null) => {\n  return async (dispatch: Function) => {\n    if (authToken !== null) {\n      axios\n        .post(\n          API_LOGOUT_URL,\n          {},\n          {\n            headers: { Authorization: `Token ${authToken}` }\n          }\n        )\n        .catch(e => console.error(e));\n    }\n    dispatch(resetPostingState());\n    dispatch(endUserSession());\n  };\n};\n","export const AUTH_TOKEN_KEY = \"authToken\";\nexport const USERNAME_KEY = \"username\";\nexport const LOGIN_TIME_KEY = \"loginTime\";\nexport const COOKIE_AGREEMENT = \"agreedToCookies\";\n","export const START_USER_SESSION = \"startUserSession\";\nexport const END_USER_SESSION = \"endUserSession\";\n\nexport interface UserState {\n  username: string | null;\n  sessionActive: boolean;\n  authToken: string | null;\n  loginTime: string | null;\n}\n\nexport interface StartUserSessionAction {\n  type: typeof START_USER_SESSION;\n  payload: UserState;\n}\n\nexport interface EndUserSessionAction {\n  type: typeof END_USER_SESSION;\n}\n","import React from \"react\";\nimport * as Io from \"react-icons/io\";\n\nimport IconWrapper from \"../../utils/elementWrappers/IconWrapper\";\nimport { LinkItem } from \"../../utils/navLinkUtils\";\n\nexport const guestBoard: LinkItem = {\n  link: \"/guest-board\",\n  displayName: \"Guest Speaking Opportunities\",\n  icon: <IconWrapper Icon={Io.IoIosMegaphone} />\n};\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport * as Io from \"react-icons/io\";\nimport { Form, Button, Card, InputGroup } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport { push } from \"connected-react-router\";\nimport { useDispatch } from \"react-redux\";\n\nimport FormWrapper from \"../formWrapper\";\nimport { passwordResetRequest } from \"../../passwordReset/passwordResetLinks\";\nimport {\n  handleInputChange,\n  displayServerErrorMessagesInErrorDiv\n} from \"../../../utils/formUtils\";\nimport * as fieldNames from \"./formFieldNames\";\nimport { register } from \"../userAccessLinks\";\nimport { API_LOGIN_URL } from \"../../../../env_vars/api_url\";\nimport { startUserSession } from \"../../../../state/userAuthState/userAuthActions\";\nimport { clearAlerts } from \"../../../../state/alertsState/alertActions\";\nimport { fetchUserPostingState } from \"../../../../state/userPostingState/actions\";\nimport { setLoadingAlertVisibility } from \"../../../../state/alertsState/alertActions\";\nimport { guestBoard } from \"../../guestSpeakingOpportunittis/links\";\n\ninterface UserLoginDetails {\n  [fieldNames.PASSWORD]: string;\n  [fieldNames.USERNAME]: string;\n}\n\nexport default () => {\n  const [userDetails, setUserDetails] = useState<UserLoginDetails>({\n    [fieldNames.PASSWORD]: \"\",\n    [fieldNames.USERNAME]: \"\"\n  });\n  const dispatch = useDispatch();\n  const updateFormElement = (e: React.FormEvent<HTMLInputElement>) =>\n    handleInputChange(e, userDetails, setUserDetails);\n  return (\n    <FormWrapper>\n      <Card>\n        <Card.Body>\n          <Card.Title>Login</Card.Title>\n          <Form\n            onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n              e.preventDefault();\n              const submitBtn = document.getElementById(\n                fieldNames.SUBMIT\n              ) as HTMLInputElement;\n              submitBtn.disabled = true;\n              (document.getElementById(\n                fieldNames.FORM_ERROR_DIV_ID\n              ) as HTMLElement).innerHTML = \"\";\n              dispatch(setLoadingAlertVisibility(\"loading\"));\n              axios\n                .post(API_LOGIN_URL, {\n                  username: userDetails[fieldNames.USERNAME],\n                  password: userDetails[fieldNames.PASSWORD]\n                })\n                .then(response => {\n                  dispatch(clearAlerts());\n                  dispatch(\n                    startUserSession(\n                      response.data.key,\n                      userDetails.login_username\n                    )\n                  );\n                  dispatch(push(guestBoard.link));\n                  dispatch(fetchUserPostingState(response.data.key));\n                })\n                .catch(error => {\n                  if (error[\"response\"] !== undefined) {\n                    displayServerErrorMessagesInErrorDiv(\n                      fieldNames.FORM_ERROR_DIV_ID,\n                      error.response.data\n                    );\n                  }\n                  submitBtn.disabled = false;\n                })\n                .finally(() =>\n                  dispatch(setLoadingAlertVisibility(\"finishing\"))\n                );\n            }}\n          >\n            <Form.Group controlId=\"formEmail\">\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id={`${fieldNames.USERNAME}-prepend`}>\n                    <Io.IoMdPerson />\n                  </InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  name={fieldNames.USERNAME}\n                  value={userDetails[fieldNames.USERNAME]}\n                  type=\"text\"\n                  placeholder=\"Username\"\n                  onChange={updateFormElement}\n                />\n              </InputGroup>\n            </Form.Group>\n\n            <Form.Group controlId=\"formPassword\">\n              <InputGroup>\n                <InputGroup.Prepend>\n                  <InputGroup.Text id={`${fieldNames.PASSWORD}-prepend`}>\n                    <Io.IoMdLock />\n                  </InputGroup.Text>\n                </InputGroup.Prepend>\n                <Form.Control\n                  name={fieldNames.PASSWORD}\n                  value={userDetails[fieldNames.PASSWORD]}\n                  type=\"password\"\n                  placeholder=\"Password\"\n                  onChange={updateFormElement}\n                />\n              </InputGroup>\n            </Form.Group>\n            <Form.Group controlId=\"submit\">\n              <Button id={fieldNames.SUBMIT} variant=\"primary\" type=\"submit\">\n                Submit\n              </Button>\n              <div id={fieldNames.FORM_ERROR_DIV_ID}>\n                {/* errors inserted here */}\n              </div>\n            </Form.Group>\n          </Form>\n          <Card.Text className=\"\">\n            Don't have an account?{\" \"}\n            <Link to={register.link}>{register.displayName}</Link>\n          </Card.Text>\n          <Card.Text>\n            Forgot your Password?{\" \"}\n            <Link to={passwordResetRequest.link}>\n              {passwordResetRequest.displayName}\n            </Link>\n          </Card.Text>\n        </Card.Body>\n      </Card>\n    </FormWrapper>\n  );\n};\n","export const USERNAME = \"login_username\";\nexport const PASSWORD = \"login_password\";\nexport const SUBMIT = \"login_submit\";\nexport const FORM_ID = \"loginForm\";\nexport const FORM_ERROR_DIV_ID = \"login_form-errors\";\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport RegisterPage from \"./registration/form\";\nimport LoginPage from \"./login/form\";\n\nimport { login, register } from \"./userAccessLinks\";\n\n// Route that redirects the user to the home page if accessed while logged in (authorised)\nexport default () => {\n  return (\n    <React.Fragment>\n      <Switch>\n        <Route path={register.link} component={RegisterPage} />\n        <Route path={login.link} component={LoginPage} />\n      </Switch>\n    </React.Fragment>\n  );\n};\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { Form, Card, Button } from \"react-bootstrap\";\nimport { push } from \"connected-react-router\";\nimport { useDispatch } from \"react-redux\";\n\nimport { API_PASSWORD_RESET_REQUEST } from \"../../../../env_vars/api_url\";\nimport { EMAIL_FIELDNAME, SUBMIT, FORM_ERROR_DIV_ID } from \"./fieldnames\";\nimport { passwordResetRequestConfirmationUrl } from \"../passwordResetLinks\";\nimport {\n  setSuccessAlerts,\n  setLoadingAlertVisibility\n} from \"../../../../state/alertsState/alertActions\";\n\nexport default () => {\n  const [email, setEmail] = useState(\"\");\n  const dispatch = useDispatch();\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Request Password Reset</Card.Title>\n        <Form\n          onSubmit={(event: React.FormEvent<HTMLFormElement>) => {\n            event.preventDefault();\n            const submitBtn = document.getElementById(\n              SUBMIT\n            ) as HTMLInputElement;\n            submitBtn.disabled = true;\n            dispatch(setLoadingAlertVisibility(\"loading\"));\n            axios\n              .post(API_PASSWORD_RESET_REQUEST, {\n                email: email\n              })\n              .then(response => {\n                dispatch(push(passwordResetRequestConfirmationUrl));\n                dispatch(\n                  setSuccessAlerts([\n                    `Password reset sent to ${email} - please check your email`\n                  ])\n                );\n              })\n              .catch(e => console.log(e))\n              .finally(() => {\n                submitBtn.disabled = false;\n                dispatch(setLoadingAlertVisibility(\"finishing\"));\n              });\n          }}\n        >\n          <Form.Group controlId={EMAIL_FIELDNAME}>\n            <Form.Label>Email</Form.Label>\n            <Form.Control\n              name={EMAIL_FIELDNAME}\n              type=\"email\"\n              placeholder=\"Enter email\"\n              value={email}\n              onChange={(e: React.FormEvent<HTMLInputElement>) =>\n                setEmail(e.currentTarget.value)\n              }\n            />\n            <Form.Text\n              className=\"d-none text-danger\"\n              id={EMAIL_FIELDNAME + \"-error\"}\n            >\n              Invalid Email\n            </Form.Text>\n          </Form.Group>\n          <Form.Group controlId=\"submit\">\n            <Button variant=\"primary\" type=\"submit\" id={SUBMIT}>\n              Submit\n            </Button>\n            <div id={FORM_ERROR_DIV_ID}>{/* errors inserted here */}</div>\n          </Form.Group>\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\n","export const EMAIL_FIELDNAME = \"pwResetEmail\";\nexport const SUBMIT = \"psResetSubmit\";\nexport const FORM_ERROR_DIV_ID = \"pwResetErrorDiv\";\n","import React, { useState } from \"react\";\nimport { Form, Card, Button } from \"react-bootstrap\";\n\nimport * as fieldnames from \"./fieldnames\";\nimport handleSubmit from \"./formSubmission\";\nimport { handleInputChange } from \"../../../utils/formUtils\";\nimport { useDispatch } from \"react-redux\";\n\nexport interface PasswordResetForm {\n  [fieldnames.NEW_PASSWORD_1]: string;\n  [fieldnames.NEW_PASSWORD_2]: string;\n}\n\nexport default () => {\n  const [passwordResetState, setPasswordResetState] = useState<\n    PasswordResetForm\n  >({\n    [fieldnames.NEW_PASSWORD_1]: \"\",\n    [fieldnames.NEW_PASSWORD_2]: \"\"\n  });\n\n  const updateFormElement = (e: React.FormEvent<HTMLInputElement>) =>\n    handleInputChange(e, passwordResetState, setPasswordResetState);\n  const dispatch = useDispatch();\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Request Password Reset</Card.Title>\n        <Form\n          onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n            handleSubmit(e, passwordResetState, dispatch);\n          }}\n        >\n          <Form.Group controlId={fieldnames.NEW_PASSWORD_1}>\n            <Form.Label>New Password</Form.Label>\n            <Form.Control\n              name={fieldnames.NEW_PASSWORD_1}\n              type=\"password\"\n              placeholder=\"Enter password\"\n              value={passwordResetState[fieldnames.NEW_PASSWORD_1]}\n              onChange={updateFormElement}\n            />\n            <Form.Text\n              className=\"d-none text-danger\"\n              id={fieldnames.NEW_PASSWORD_1 + \"-error\"}\n            >\n              Please choose a safer password. It should be at least 6 characters\n              long, contain lower and uppercase letters as well as at least one\n              number.\n            </Form.Text>\n          </Form.Group>\n          <Form.Group controlId={fieldnames.NEW_PASSWORD_2}>\n            <Form.Label>Repeat Password</Form.Label>\n            <Form.Control\n              name={fieldnames.NEW_PASSWORD_2}\n              type=\"password\"\n              placeholder=\"Repeat password\"\n              value={passwordResetState[fieldnames.NEW_PASSWORD_2]}\n              onChange={updateFormElement}\n            />\n            <Form.Text\n              className=\"d-none text-danger\"\n              id={fieldnames.NEW_PASSWORD_2 + \"-error\"}\n            >\n              Passwords don't match\n            </Form.Text>\n          </Form.Group>\n          <Form.Group controlId=\"submit\">\n            <Button variant=\"primary\" type=\"submit\" id={fieldnames.SUBMIT}>\n              Submit\n            </Button>\n            <div id={fieldnames.FORM_ERROR_DIV_ID}>\n              {/* errors inserted here */}\n            </div>\n          </Form.Group>\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\n","export const NEW_PASSWORD_1 = \"newPw1\";\nexport const NEW_PASSWORD_2 = \"newPW2\";\nexport const SUBMIT = \"confirmPwSubmit\";\nexport const FORM_ERROR_DIV_ID = \"confirmPwError\";\n","import axios from \"axios\";\nimport { push } from \"connected-react-router\";\n\nimport {\n  hideAllInputErrorMessages,\n  displayInputErrorMessages,\n  displaySingleErrorMessageInErrorDiv\n} from \"../../../utils/formUtils\";\nimport * as fieldnames from \"./fieldnames\";\nimport { PasswordResetForm } from \"./passwordResetConfirm\";\nimport { API_PASSWORD_RESET_CONFIRM } from \"../../../../env_vars/api_url\";\nimport { passwordResetConfirmationUrl } from \"../passwordResetLinks\";\nimport {\n  setSuccessAlerts,\n  setLoadingAlertVisibility\n} from \"../../../../state/alertsState/alertActions\";\n\ninterface PasswordResetPayload {\n  uid: string;\n  token: string;\n  new_password1: string;\n  new_password2: string;\n}\n\nconst getFaultyInputFieldNames = (formState: PasswordResetForm) => {\n  const faultyInputFieldNames: Array<String> = [];\n  if (\n    !/^(?=.*[a-z])(?=.*[A-Z]).{6,}$/.test(formState[fieldnames.NEW_PASSWORD_1])\n  ) {\n    faultyInputFieldNames.push(fieldnames.NEW_PASSWORD_1);\n  }\n  if (\n    formState[fieldnames.NEW_PASSWORD_1] !==\n    formState[fieldnames.NEW_PASSWORD_2]\n  ) {\n    faultyInputFieldNames.push(fieldnames.NEW_PASSWORD_2);\n  }\n  return faultyInputFieldNames;\n};\n\nexport default (\n  event: React.FormEvent<HTMLFormElement>,\n  formInputValues: PasswordResetForm,\n  reduxActionDispatch: Function\n) => {\n  event.preventDefault();\n  const formKeys = [];\n  for (let key in formInputValues) {\n    formKeys.push(key);\n  }\n  hideAllInputErrorMessages(formKeys);\n  const faultyInputFieldNames = getFaultyInputFieldNames(formInputValues);\n  if (faultyInputFieldNames.length > 0) {\n    displayInputErrorMessages(faultyInputFieldNames);\n  } else {\n    const currentUrlPath = document.location.pathname;\n    const pathElements = currentUrlPath.split(\"/\");\n    const uid = pathElements[pathElements.length - 3];\n    const token = pathElements[pathElements.length - 2];\n    const passwordResetPayload: PasswordResetPayload = {\n      uid: uid,\n      token: token,\n      new_password1: formInputValues[fieldnames.NEW_PASSWORD_1],\n      new_password2: formInputValues[fieldnames.NEW_PASSWORD_2]\n    };\n    const submitBtn = document.getElementById(\n      fieldnames.SUBMIT\n    ) as HTMLInputElement;\n    submitBtn.disabled = true;\n    (document.getElementById(\n      fieldnames.FORM_ERROR_DIV_ID\n    ) as HTMLElement).innerHTML = \"\";\n    setLoadingAlertVisibility(\"loading\");\n    axios\n      .post(API_PASSWORD_RESET_CONFIRM, passwordResetPayload)\n      .then(response => {\n        reduxActionDispatch(push(passwordResetConfirmationUrl));\n        reduxActionDispatch(\n          setSuccessAlerts([\"Successfully changed your password!\"])\n        );\n      })\n      .catch((error: any) => {\n        displaySingleErrorMessageInErrorDiv(\n          fieldnames.FORM_ERROR_DIV_ID,\n          \"Password reset form is invalid.\"\n        );\n      })\n      .finally(() => {\n        submitBtn.disabled = false;\n        setLoadingAlertVisibility(\"finishing\");\n      });\n  }\n};\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\n\nimport {\n  passwordResetRequest,\n  confirmResetPassword\n} from \"./passwordResetLinks\";\nimport InitPasswordResetRequest from \"./passwordResetRequest/initPasswordResetRequest\";\nimport PasswordResetConfirm from \"./passwordResetConfirm/passwordResetConfirm\";\n\nexport default () => (\n  <React.Fragment>\n    <Switch>\n      <Route\n        path={passwordResetRequest.link}\n        component={InitPasswordResetRequest}\n      />\n      <Route\n        path={confirmResetPassword.link}\n        component={PasswordResetConfirm}\n      />\n    </Switch>\n  </React.Fragment>\n);\n","import React, { useContext } from \"react\";\nimport { Button, Row, Col } from \"react-bootstrap\";\nimport { push } from \"connected-react-router\";\nimport { useDispatch } from \"react-redux\";\nimport * as Io from \"react-icons/io\";\nimport * as Fa from \"react-icons/fa\";\nimport styled from \"styled-components\";\n\nimport { GuestPostsContext } from \"./providerComponent\";\nimport IconWrapper from \"../../../utils/elementWrappers/IconWrapper\";\nimport EllipsedText from \"../../../utils/ellipsedText\";\nimport {\n  useUserAuthSelector,\n  useUserPostingStateSelector\n} from \"../../../../state/typedSelectors\";\nimport { setNegativeAlerts } from \"../../../../state/alertsState/alertActions\";\nimport { login } from \"../../userAccess/userAccessLinks\";\n\nconst PodcastImage = styled.img`\n  display: block;\n  max-width: 50px;\n  height: auto;\n`;\n\nconst GuestPostRow = styled.div`\n  .post-wrapper {\n    border-width: 1px 0px 0px 0px;\n    border-style: solid;\n    border-color: lightgrey;\n    padding: 10px 0px;\n    display: flex;\n    flex-direction: row;\n    max-width: 100%;\n    color: black;\n    text-decoration: none !important;\n  }\n  :hover {\n    text-decoration: none !important;\n  }\n  .post-wrapper:hover {\n    cursor: pointer;\n    text-decoration: none !important;\n  }\n  p {\n    margin-bottom: 0.1rem;\n    color: black !important;\n  }\n  .post-wrapper:visited small {\n    color: grey !important;\n  }\n  .post-wrapper:visited p {\n    color: grey !important;\n  }\n  .post-wrapper:hover small {\n    color: rgba(0, 0, 0, 0.6) !important;\n  }\n  .post-wrapper:hover p {\n    text-decoration: none;\n    color: rgba(0, 0, 0, 0.6) !important;\n  }\n  .post-wrapper:hover img {\n    opacity: 0.5 !important;\n  }\n  .post-header {\n    font-weight: bold;\n  }\n`;\n\nexport interface GuestPostData {\n  id: string;\n  heading: string;\n  description: string;\n  host: string;\n  has_already_applied: boolean;\n  podcast: {\n    title: string;\n    image_link: string;\n    rss_url: string;\n  };\n}\n\ninterface GuestPostProps {\n  guestPostData: GuestPostData | null;\n}\n\nexport const generatePostButtonId = (postUuid: string) =>\n  `post-btn-${postUuid}`;\nexport const generateWrapperPostId = (postUuid: string) => `post-${postUuid}`;\n\nexport default (props: GuestPostProps) => {\n  const { username, sessionActive } = useUserAuthSelector(\n    state => state.userAuthReducer\n  );\n\n  const {\n    applicationsThisMonth,\n    isVerifiedPodcaster\n  } = useUserPostingStateSelector(state => state.postingStateReducer);\n\n  const { guestPostData } = props;\n  const {\n    setCurrentDetailedPost,\n    setApplicationPostId,\n    setPostToUnpublish\n  } = useContext(GuestPostsContext);\n  if (\n    guestPostData === null ||\n    setCurrentDetailedPost === null ||\n    setApplicationPostId === null ||\n    setPostToUnpublish === null\n  ) {\n    return null;\n  }\n  const dispatch = useDispatch();\n\n  const userIsPoster = username === guestPostData.host;\n  const ActionButton = (buttonProps: any) => {\n    if (userIsPoster) {\n      return (\n        <div\n          style={{ height: \"100%\" }}\n          className=\"d-flex justify-content-center flex-row\"\n          id={`${generatePostButtonId(guestPostData.id)}`}\n        >\n          <Button\n            variant=\"danger\"\n            onClick={(e: React.MouseEvent) => {\n              setPostToUnpublish(guestPostData.id);\n              e.stopPropagation();\n            }}\n          >\n            <IconWrapper Icon={Io.IoIosTrash} />\n            Unpublish\n          </Button>\n        </div>\n      );\n    } else {\n      let applyButtonIsDisabled = false;\n      if (applicationsThisMonth == null || applicationsThisMonth <= 0) {\n        applyButtonIsDisabled = true;\n      } else if (isVerifiedPodcaster == null || isVerifiedPodcaster === false) {\n        applyButtonIsDisabled = true;\n      }\n      return guestPostData.has_already_applied ? (\n        <p className=\"text-md-center\">Already Applied!</p>\n      ) : (\n        <Button\n          className=\"text-nowrap\"\n          disabled={applyButtonIsDisabled && sessionActive}\n          onClick={(e: React.MouseEvent) => {\n            if (sessionActive) {\n              setApplicationPostId(guestPostData.id);\n            } else {\n              dispatch(push(login.link));\n              dispatch(\n                setNegativeAlerts([\n                  \"You need to be logged in to apply to posts!\"\n                ])\n              );\n            }\n            e.stopPropagation();\n          }}\n        >\n          <IconWrapper Icon={Io.IoIosSend} />\n          Apply\n        </Button>\n      );\n    }\n  };\n\n  return (\n    <GuestPostRow\n      id={generateWrapperPostId(guestPostData.id)}\n      onClick={() => setCurrentDetailedPost(guestPostData)}\n    >\n      <a className=\"post-wrapper\" href={`#post-${guestPostData.id}`}>\n        <div className=\"align-middle col-2 col-md-1 pl-0\">\n          <PodcastImage\n            className=\"m-auto\"\n            src={guestPostData.podcast.image_link}\n            alt={`Logo image for podcast ${guestPostData.podcast.title}`}\n          />\n        </div>\n        <div className=\"col-md-10 col-10\">\n          <Row>\n            <Col md={5}>\n              <small className=\"text-black\">\n                <IconWrapper Icon={Io.IoIosChatboxes} />\n                Conversation Topic\n              </small>\n              <EllipsedText className=\"post-header \">\n                {guestPostData.heading}\n              </EllipsedText>\n            </Col>\n            <Col md={5}>\n              <small>\n                <IconWrapper Icon={Fa.FaPodcast} />\n                Podcast\n              </small>\n              <EllipsedText>{guestPostData.podcast.title}</EllipsedText>\n            </Col>\n            <Col md={2}>\n              <div className=\"d-md-flex flex-column justify-content-center\">\n                <ActionButton />\n              </div>\n            </Col>\n          </Row>\n        </div>\n      </a>\n    </GuestPostRow>\n  );\n};\n","import React from \"react\";\nimport { Pagination } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { push } from \"connected-react-router\";\nimport styled from \"styled-components\";\n\nimport { guestBoard } from \"../links\";\n\nconst PaginationWrapper = styled.div`\n  border-width: 1px 0px 0px 0px;\n  border-style: solid;\n  border-color: lightgrey;\n  margin: 0 auto;\n`;\n\ninterface Props {\n  page: string | undefined;\n  maxPages: number;\n  resetDataFetch: Function;\n}\n\nexport default (props: Props) => {\n  const dispatch = useDispatch();\n\n  const items = [];\n  for (let number = 1; number < props.maxPages + 1; number++) {\n    items.push(\n      <Pagination.Item\n        key={number}\n        active={\n          number === parseInt(props.page === undefined ? \"1\" : props.page)\n        }\n        onClick={() => {\n          dispatch(push(`${guestBoard.link}/?page=${number}`));\n          props.resetDataFetch();\n        }}\n      >\n        {number}\n      </Pagination.Item>\n    );\n  }\n  return (\n    <PaginationWrapper className=\"pt-2\">\n      <Pagination className=\"justify-content-center\">{items}</Pagination>\n    </PaginationWrapper>\n  );\n};\n","import React, { useState } from \"react\";\nimport axios from \"axios\";\nimport { useDispatch } from \"react-redux\";\n\nimport { API_GUEST_POST_LIST } from \"../../../../env_vars/api_url\";\nimport GuestPost, { GuestPostData } from \"./post\";\nimport { setLoadingAlertVisibility } from \"../../../../state/alertsState/alertActions\";\nimport {\n  useUserAuthSelector,\n  useRouterSelector\n} from \"../../../../state/typedSelectors\";\nimport * as QueryString from \"query-string\";\nimport Loader from \"../../../utils/loader\";\nimport Pagination from \"./pagination\";\n\ninterface GuestListResponse {\n  results: Array<GuestPostData>;\n  total_pages: number;\n}\n\nexport default () => {\n  const [posts, setPosts] = useState<Array<GuestPostData> | undefined>(\n    undefined\n  );\n  const [totalPages, setTotalPages] = useState(0);\n  const [page, setPage] = useState<string | undefined>(undefined);\n  const [dataFetched, setDataFetched] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const urlParams = useRouterSelector(state => state.router.location.search);\n  const { authToken } = useUserAuthSelector(state => state.userAuthReducer);\n\n  const queryParams = QueryString.parse(urlParams);\n  const currentQueryPage =\n    \"page\" in queryParams ? `${queryParams[\"page\"]}` : undefined;\n\n  if (!dataFetched) {\n    dispatch(setLoadingAlertVisibility(\"loading\"));\n    const config =\n      authToken === null\n        ? {}\n        : { headers: { Authorization: \"Token \" + authToken } };\n    axios\n      .get(\n        API_GUEST_POST_LIST(\n          currentQueryPage === undefined ? \"1\" : currentQueryPage\n        ),\n        config\n      )\n      .then(response => {\n        setDataFetched(true);\n        const data: GuestListResponse = response.data;\n        setPosts(data.results);\n        setTotalPages(data.total_pages);\n      })\n      .catch(e => console.log(e))\n      .finally(() => {\n        if (!dataFetched) {\n          setDataFetched(true);\n          dispatch(setLoadingAlertVisibility(\"finishing\"));\n        }\n        if (page !== currentQueryPage) {\n          setPage(currentQueryPage);\n        }\n      });\n  }\n\n  return dataFetched === false ? (\n    <Loader />\n  ) : (\n    <div>\n      {posts !== undefined\n        ? posts.map((postData, postIndex) => (\n            <GuestPost\n              guestPostData={postData}\n              key={`guest-post-${postIndex}`}\n            />\n          ))\n        : null}\n      <Pagination\n        resetDataFetch={() => setDataFetched(false)}\n        page={page === undefined ? \"1\" : page}\n        maxPages={totalPages}\n      />\n    </div>\n  );\n};\n","import React, { FunctionComponent } from \"react\";\nimport { Modal, Container } from \"react-bootstrap\";\nimport styled from \"styled-components\";\n\nconst Overlay = styled.div`\n  top: 0;\n  left: 0;\n  position: fixed;\n  min-height: 100%;\n  width: 100%;\n  background-color: rgba(0, 0, 0, 0.6);\n  z-index: 10;\n  .card-overlay {\n    margin: 5rem auto;\n    max-width: 40rem;\n  }\n  .rel {\n    position: relative;\n  }\n  .exit-container {\n    z-index: 100;\n    width: 100%;\n    position: absolute;\n    display: flex;\n    justify-content: flex-end;\n  }\n  .card-container {\n    max-height: calc(100vh - 10rem);\n  }\n  .scroller-box {\n    overflow-y: auto !important;\n    overflow-x: hidden !important;\n  }\n`;\n\ninterface Props {\n  closeOverlay: Function;\n  title: string;\n}\n\nconst CardOverlay: FunctionComponent<Props> = props => (\n  <Overlay>\n    <Container className=\"card-overlay rel\">\n      <Modal\n        className=\"card-container\"\n        show={true}\n        onHide={() => props.closeOverlay()}\n      >\n        <Modal.Header closeButton>\n          <Modal.Title>{props.title}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body className=\"scroller-box\">{props.children}</Modal.Body>\n      </Modal>\n    </Container>\n  </Overlay>\n);\n\nexport default CardOverlay;\n","import React, { FunctionComponent, useContext } from \"react\";\nimport * as Io from \"react-icons/io\";\nimport * as Fa from \"react-icons/fa\";\n\nimport IconWrapper from \"../../../utils/elementWrappers/IconWrapper\";\nimport EllipsedText from \"../../../utils/ellipsedText\";\nimport CardOverlay from \"../../../utils/elementWrappers/cardOverlay\";\nimport { GuestPostsContext } from \"./providerComponent\";\n\nconst PostDetailsOverlay: FunctionComponent = () => {\n  const { currentDetailedPost, setCurrentDetailedPost } = useContext(\n    GuestPostsContext\n  );\n  if (currentDetailedPost === null || setCurrentDetailedPost === null) {\n    return null;\n  }\n  const closeOverlay = () => setCurrentDetailedPost(null);\n  return (\n    <CardOverlay title={`Post Details`} closeOverlay={closeOverlay}>\n      <small>\n        <IconWrapper Icon={Io.IoIosChatboxes} />\n        Conversation Topic\n      </small>\n      <p>{currentDetailedPost.heading}</p>\n      <small>\n        <IconWrapper Icon={Fa.FaPodcast} />\n        Podcast\n      </small>\n      <EllipsedText>{currentDetailedPost.podcast.title}</EllipsedText>\n      <small>\n        <IconWrapper Icon={Io.IoIosInformationCircle} />\n        Description\n      </small>\n      <p>{currentDetailedPost.description}</p>\n    </CardOverlay>\n  );\n};\n\nexport default PostDetailsOverlay;\n","export const POST_HEADING = \"postHeading\";\nexport const DESCRIPTION = \"postDescription\";\nexport const ONLY_PODCASTERS_CAN_APPLY = \"onlyPodcasters\";\nexport const SUBMIT = \"postSubmit\";\nexport const ERROR_DIV = \"postErrorDiv\";\n","import axios from \"axios\";\nimport {\n  setSuccessAlerts,\n  setLoadingAlertVisibility\n} from \"../../../../../state/alertsState/alertActions\";\n\nimport {\n  hideAllInputErrorMessages,\n  displayInputErrorMessages,\n  displaySingleErrorMessageInErrorDiv,\n  toggleSubmitButton\n} from \"../../../../utils/formUtils\";\nimport * as fieldnames from \"./fieldnames\";\nimport {\n  PostFormValueInterface,\n  headingMaxCharacters,\n  descriptionMaxCharacters\n} from \"./createPostOverlay\";\nimport { API_GUEST_POST } from \"../../../../../env_vars/api_url\";\nimport { incrementPostThisMonth } from \"../../../../../state/userPostingState/actions\";\n\nconst getFaultyInputFieldNames = (formState: PostFormValueInterface) => {\n  const faultyInputFieldNames: Array<String> = [];\n  if (\n    formState[fieldnames.POST_HEADING].length < 8 ||\n    formState[fieldnames.POST_HEADING].length > headingMaxCharacters\n  ) {\n    faultyInputFieldNames.push(fieldnames.POST_HEADING);\n  }\n  if (formState[fieldnames.DESCRIPTION].length > descriptionMaxCharacters) {\n    faultyInputFieldNames.push(fieldnames.DESCRIPTION);\n  }\n  return faultyInputFieldNames;\n};\n\ninterface GuestPostPayload {\n  heading: string;\n  description: string;\n  only_podcasters_can_apply: boolean;\n}\n\nexport default (\n  event: React.FormEvent<HTMLFormElement>,\n  formInputValues: PostFormValueInterface,\n  reduxActionDispatch: Function,\n  authToken: string,\n  closeOverlay: Function\n) => {\n  event.preventDefault();\n  const formKeys = [];\n  for (let key in formInputValues) {\n    formKeys.push(key);\n  }\n  hideAllInputErrorMessages(formKeys);\n  const faultyInputFieldNames = getFaultyInputFieldNames(formInputValues);\n  if (faultyInputFieldNames.length > 0) {\n    displayInputErrorMessages(faultyInputFieldNames);\n  } else {\n    const postPayload: GuestPostPayload = {\n      heading: formInputValues.postHeading,\n      description: formInputValues.postDescription,\n      only_podcasters_can_apply: formInputValues.onlyPodcasters\n    };\n    toggleSubmitButton(fieldnames.SUBMIT);\n    (document.getElementById(fieldnames.ERROR_DIV) as HTMLElement).innerHTML =\n      \"\";\n    reduxActionDispatch(setLoadingAlertVisibility(\"loading\"));\n    axios\n      .post(API_GUEST_POST, postPayload, {\n        headers: { Authorization: `Token ${authToken}` }\n      })\n      .then(response => {\n        reduxActionDispatch(\n          setSuccessAlerts([`Your post has been published!`])\n        );\n        reduxActionDispatch(incrementPostThisMonth());\n        closeOverlay();\n      })\n      .catch((error: any) => {\n        displaySingleErrorMessageInErrorDiv(\n          fieldnames.ERROR_DIV,\n          error.response.data.detail\n        );\n        toggleSubmitButton(fieldnames.SUBMIT);\n      })\n      .finally(() =>\n        reduxActionDispatch(setLoadingAlertVisibility(\"finishing\"))\n      );\n  }\n};\n","import React, { useState, FunctionComponent } from \"react\";\nimport { Form, Button } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport * as Io from \"react-icons/io\";\n\nimport IconWrapper from \"../../../../utils/elementWrappers/IconWrapper\";\nimport CardOverlay from \"../../../../utils/elementWrappers/cardOverlay\";\nimport { handleInputChange } from \"../../../../utils/formUtils\";\nimport Submit from \"./submission\";\nimport * as fieldnames from \"./fieldnames\";\nimport { useUserAuthSelector } from \"../../../../../state/typedSelectors\";\n\ninterface Props {\n  closeOverlayCallback: Function;\n}\n\nexport interface PostFormValueInterface {\n  [fieldnames.POST_HEADING]: string;\n  [fieldnames.DESCRIPTION]: string;\n  [fieldnames.ONLY_PODCASTERS_CAN_APPLY]: boolean;\n}\n\nexport const headingMaxCharacters = 50;\nexport const descriptionMaxCharacters = 500;\n\nconst CreatePostOverlay: FunctionComponent<Props> = props => {\n  const [formValues, setFormValues] = useState<PostFormValueInterface>({\n    [fieldnames.POST_HEADING]: \"\",\n    [fieldnames.DESCRIPTION]: \"\",\n    [fieldnames.ONLY_PODCASTERS_CAN_APPLY]: true\n  });\n  const dispatch = useDispatch();\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) =>\n    handleInputChange(e, formValues, setFormValues);\n\n  const { authToken } = useUserAuthSelector(state => state.userAuthReducer);\n  return (\n    <CardOverlay\n      title={\"Create a new Post\"}\n      closeOverlay={() => props.closeOverlayCallback()}\n    >\n      <Form\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) =>\n          Submit(e, formValues, dispatch, `${authToken}`, () =>\n            props.closeOverlayCallback()\n          )\n        }\n      >\n        <Form.Group>\n          <Form.Label>\n            <IconWrapper Icon={Io.IoIosChatboxes} />\n            Conversation Topic\n          </Form.Label>\n          <Form.Control\n            name={fieldnames.POST_HEADING}\n            value={formValues[fieldnames.POST_HEADING]}\n            onChange={handleChange}\n            type=\"text\"\n            placeholder=\"Show about Antarctic Sealife\"\n          ></Form.Control>\n          <Form.Text className=\"text-muted\">\n            {`${\n              formValues[fieldnames.POST_HEADING].length\n            }/${headingMaxCharacters}`}\n          </Form.Text>\n          <Form.Text\n            className=\"d-none text-danger\"\n            id={fieldnames.POST_HEADING + \"-error\"}\n          >\n            Episode topic nees to be between 8 and 50 Characters long\n          </Form.Text>\n        </Form.Group>\n        <Form.Group>\n          <Form.Label>\n            <IconWrapper Icon={Io.IoIosInformationCircle} /> Description\n          </Form.Label>\n          <Form.Control\n            name={fieldnames.DESCRIPTION}\n            value={formValues[fieldnames.DESCRIPTION]}\n            onChange={handleChange}\n            as=\"textarea\"\n            rows=\"3\"\n            placeholder=\"My ideal guest knows their way around the various animal types and their habitat. They should have experience in...\"\n          ></Form.Control>\n          <Form.Text className=\"text-muted\">\n            {`${\n              formValues[fieldnames.DESCRIPTION].length\n            }/${descriptionMaxCharacters}`}\n          </Form.Text>\n          <Form.Text\n            className=\"d-none text-danger\"\n            id={fieldnames.DESCRIPTION + \"-error\"}\n          >\n            Description can be at most 500 Characters long\n          </Form.Text>\n        </Form.Group>\n        <Form.Group controlId={fieldnames.SUBMIT} className=\"mb-0\">\n          <Button type=\"submit\" id={fieldnames.SUBMIT}>\n            Submit\n          </Button>\n          <div id={fieldnames.ERROR_DIV} />\n        </Form.Group>\n      </Form>\n    </CardOverlay>\n  );\n};\n\nexport default CreatePostOverlay;\n","export const MESSAGE = \"applicationMessage\";\nexport const AGREED_TO_TERMS = \"termAgreement\";\nexport const SUBMIT = \"postSubmit\";\nexport const ERROR_DIV = \"postErrorDiv\";\n","import React, { useState, FunctionComponent } from \"react\";\nimport { Form, Button, InputGroup } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport * as Io from \"react-icons/io\";\n\nimport IconWrapper from \"../../../../utils/elementWrappers/IconWrapper\";\nimport CardOverlay from \"../../../../utils/elementWrappers/cardOverlay\";\nimport Submit from \"./submission\";\nimport * as fieldnames from \"./fieldnames\";\nimport { enDatenschutzLink } from \"../../../legal/legalRoutes\";\nimport { contactDetailsLink } from \"../../../accounts/accountLinks\";\nimport { handleInputChange } from \"../../../../utils/formUtils\";\nimport { useUserAuthSelector } from \"../../../../../state/typedSelectors\";\nimport { Link } from \"react-router-dom\";\n\ninterface Props {\n  closeOverlayCallback: Function;\n  postId: string;\n}\n\nexport const messageMaxCharacters = 500;\n\nconst CreatePostOverlay: FunctionComponent<Props> = props => {\n  const [formValues, setFormValues] = useState({\n    [fieldnames.MESSAGE]: \"\",\n    [fieldnames.AGREED_TO_TERMS]: false\n  });\n  const dispatch = useDispatch();\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) =>\n    handleInputChange(e, formValues, setFormValues);\n\n  const { authToken } = useUserAuthSelector(state => state.userAuthReducer);\n  return (\n    <CardOverlay\n      title={\"Apply to Post\"}\n      closeOverlay={() => props.closeOverlayCallback()}\n    >\n      <Form\n        onSubmit={(e: React.FormEvent<HTMLFormElement>) => {\n          Submit(\n            e,\n            formValues[fieldnames.MESSAGE],\n            formValues[fieldnames.AGREED_TO_TERMS],\n            props.postId,\n            dispatch,\n            `${authToken}`,\n            () => props.closeOverlayCallback()\n          );\n        }}\n      >\n        <Form.Group>\n          <Form.Label>\n            <IconWrapper Icon={Io.IoIosInformationCircle} /> Application Message\n          </Form.Label>\n          <Form.Control\n            name={fieldnames.MESSAGE}\n            value={formValues[fieldnames.MESSAGE]}\n            onChange={handleChange}\n            as=\"textarea\"\n            rows=\"3\"\n            placeholder=\"Hi! I saw you were looking for an expert on rare animals. My own podcast happense to cover these topics and...\"\n          ></Form.Control>\n          <Form.Text className=\"text-muted\">\n            {`${formValues[fieldnames.MESSAGE].length}/${messageMaxCharacters}`}\n          </Form.Text>\n          <Form.Text\n            className=\"d-none text-danger\"\n            id={fieldnames.MESSAGE + \"-error\"}\n          >\n            Message can be at most 500 Characters long\n          </Form.Text>\n        </Form.Group>\n        <Form.Group controlId={fieldnames.AGREED_TO_TERMS}>\n          <InputGroup>\n            <Form.Check\n              name={fieldnames.AGREED_TO_TERMS}\n              type=\"checkbox\"\n              checked={formValues[fieldnames.AGREED_TO_TERMS]}\n              onChange={handleChange}\n            />\n            <Form.Text>\n              I agree to share my\n              <Link to={contactDetailsLink.link}>Contact Details</Link> with\n              another user and the\n              <Link to={enDatenschutzLink}>Data Policy</Link>\n            </Form.Text>\n          </InputGroup>\n          <Form.Text\n            className=\"d-none text-danger\"\n            id={fieldnames.AGREED_TO_TERMS + \"-error\"}\n          >\n            You need to agree to the Terms to use our Service\n          </Form.Text>\n        </Form.Group>\n        <Form.Group controlId={fieldnames.SUBMIT} className=\"mb-0\">\n          <Button type=\"submit\" id={fieldnames.SUBMIT}>\n            Submit\n          </Button>\n          <div id={fieldnames.ERROR_DIV} />\n        </Form.Group>\n      </Form>\n    </CardOverlay>\n  );\n};\n\nexport default CreatePostOverlay;\n","import axios from \"axios\";\nimport {\n  setSuccessAlerts,\n  setLoadingAlertVisibility\n} from \"../../../../../state/alertsState/alertActions\";\n\nimport {\n  displayInputErrorMessages,\n  displaySingleErrorMessageInErrorDiv,\n  toggleSubmitButton\n} from \"../../../../utils/formUtils\";\nimport * as fieldnames from \"./fieldnames\";\nimport { messageMaxCharacters } from \"./form\";\nimport { API_SPEAKING_APPLICATION } from \"../../../../../env_vars/api_url\";\nimport { incrementPostThisMonth } from \"../../../../../state/userPostingState/actions\";\nimport { generatePostButtonId } from \"../post\";\n\nexport default (\n  event: React.FormEvent<HTMLFormElement>,\n  applicationMessage: string,\n  agreedToTerms: boolean,\n  postUuid: string,\n  reduxActionDispatch: Function,\n  authToken: string,\n  closeOverlay: Function\n) => {\n  event.preventDefault();\n  console.log(\"sending submission\");\n  const badInputs = [];\n  if (!agreedToTerms) {\n    badInputs.push(fieldnames.AGREED_TO_TERMS);\n  }\n  if (applicationMessage.length > messageMaxCharacters) {\n    badInputs.push(fieldnames.MESSAGE);\n  }\n  if (badInputs.length > 0) {\n    displayInputErrorMessages(badInputs);\n  } else {\n    toggleSubmitButton(fieldnames.SUBMIT);\n    (document.getElementById(fieldnames.ERROR_DIV) as HTMLElement).innerHTML =\n      \"\";\n    reduxActionDispatch(setLoadingAlertVisibility(\"loading\"));\n    axios\n      .post(\n        API_SPEAKING_APPLICATION,\n        { guestPostId: postUuid },\n        {\n          headers: { Authorization: `Token ${authToken}` }\n        }\n      )\n      .then(response => {\n        reduxActionDispatch(\n          setSuccessAlerts([\n            `You have applied to the post! You have ${response.data.remainingApplications} applications left for the month!`\n          ])\n        );\n        reduxActionDispatch(incrementPostThisMonth());\n        toggleSubmitButton(fieldnames.SUBMIT);\n        const buttonId = generatePostButtonId(postUuid);\n        (document.getElementById(buttonId) as HTMLElement).innerHTML =\n          \"<p>Already Applied!</p>\";\n        closeOverlay();\n      })\n      .catch((error: any) => {\n        displaySingleErrorMessageInErrorDiv(\n          fieldnames.ERROR_DIV,\n          error.response.data.detail\n        );\n        toggleSubmitButton(fieldnames.SUBMIT);\n      })\n      .finally(() =>\n        reduxActionDispatch(setLoadingAlertVisibility(\"finishing\"))\n      );\n  }\n};\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Button } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport * as Io from \"react-icons/io\";\n\nimport CardOverlay from \"../../../utils/elementWrappers/cardOverlay\";\nimport IconWrapper from \"../../../utils/elementWrappers/IconWrapper\";\nimport { useUserAuthSelector } from \"../../../../state/typedSelectors\";\nimport {\n  toggleSubmitButton,\n  displaySingleErrorMessageInErrorDiv\n} from \"../../../utils/formUtils\";\nimport { API_UNPUBLISH_GUEST_POST } from \"../../../../env_vars/api_url\";\nimport { generateWrapperPostId } from \"./post\";\nimport { setSuccessAlerts } from \"../../../../state/alertsState/alertActions\";\n\ninterface Props {\n  closeOverlay: Function;\n  postId: string;\n}\n\nconst SUBMIT_BTN = \"unpublishSubmit\";\nconst ERROR_DIV_ID = \"unpublishErrorDiv\";\n\nexport default (props: Props) => {\n  const { authToken } = useUserAuthSelector(state => state.userAuthReducer);\n  const dispatch = useDispatch();\n  return (\n    <CardOverlay\n      title={\"Are you sure?\"}\n      closeOverlay={() => props.closeOverlay()}\n    >\n      <p>\n        You still won't be able to create a new post until a month has passed.\n      </p>\n      <Button\n        id={SUBMIT_BTN}\n        variant=\"danger\"\n        onClick={() => {\n          toggleSubmitButton(SUBMIT_BTN);\n          axios\n            .post(\n              API_UNPUBLISH_GUEST_POST,\n              { pk: props.postId },\n              {\n                headers: { Authorization: `Token ${authToken}` }\n              }\n            )\n            .then(response => {\n              const postElement = document.getElementById(\n                generateWrapperPostId(props.postId)\n              ) as HTMLElement;\n              postElement.innerHTML = \"\";\n              props.closeOverlay();\n              dispatch(setSuccessAlerts([\"Post was unpublished!\"]));\n            })\n            .catch((error: any) => {\n              displaySingleErrorMessageInErrorDiv(\n                ERROR_DIV_ID,\n                \"Unable to unpublish post!\"\n              );\n              toggleSubmitButton(SUBMIT_BTN);\n            });\n        }}\n      >\n        <IconWrapper Icon={Io.IoIosTrash} />\n        Confirm\n      </Button>\n      <div id={ERROR_DIV_ID} />\n    </CardOverlay>\n  );\n};\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Alert } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\nimport * as Io from \"react-icons/io\";\n\nimport {\n  useUserPostingStateSelector,\n  useUserAuthSelector\n} from \"../../../../state/typedSelectors\";\nimport { fetchUserPostingState } from \"../../../../state/userPostingState/actions\";\nimport { myPodcastLink, contactDetailsLink } from \"../../accounts/accountLinks\";\nimport IconWrapper from \"../../../utils/elementWrappers/IconWrapper\";\n\nexport default () => {\n  const dispatch = useDispatch();\n\n  const {\n    isVerifiedPodcaster,\n    hasCreatedContactDetails,\n    postsThisMonth,\n    applicationsThisMonth\n  } = useUserPostingStateSelector(state => state.postingStateReducer);\n  const { authToken, sessionActive } = useUserAuthSelector(\n    state => state.userAuthReducer\n  );\n\n  if (sessionActive !== true) {\n    return null;\n  }\n\n  if (\n    isVerifiedPodcaster == null ||\n    hasCreatedContactDetails == null ||\n    postsThisMonth == null ||\n    applicationsThisMonth == null\n  ) {\n    dispatch(fetchUserPostingState(authToken));\n    return null;\n  } else {\n    return (\n      <div>\n        {!isVerifiedPodcaster ? (\n          <Alert variant={\"danger\"}>\n            You need to be a verified Podcaster to interact on the site. Please\n            visit{\" \"}\n            <Link to={myPodcastLink.link}>\n              {myPodcastLink.icon}\n              {myPodcastLink.displayName}\n            </Link>{\" \"}\n            to link a Podcast to your Account.\n          </Alert>\n        ) : null}\n        {!hasCreatedContactDetails ? (\n          <Alert variant={\"danger\"}>\n            Please take a look at your{\" \"}\n            <Link to={contactDetailsLink.link}>\n              {contactDetailsLink.icon}\n              {contactDetailsLink.displayName}\n            </Link>{\" \"}\n            before applying to a post and make sure you know what you are\n            sharing with others.\n          </Alert>\n        ) : null}\n        <Alert variant={\"info\"}>\n          <IconWrapper Icon={Io.IoIosInformationCircleOutline} /> You are able\n          to post {postsThisMonth} more times this month and send out{\" \"}\n          {applicationsThisMonth} applications\n        </Alert>\n      </div>\n    );\n  }\n};\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { push } from \"connected-react-router\";\nimport { useDispatch } from \"react-redux\";\nimport * as Io from \"react-icons/io\";\n\nimport { setNegativeAlerts } from \"../../../../state/alertsState/alertActions\";\nimport IconWrapper from \"../../../utils/elementWrappers/IconWrapper\";\nimport { login } from \"../../userAccess/userAccessLinks\";\nimport {\n  useUserAuthSelector,\n  useUserPostingStateSelector\n} from \"../../../../state/typedSelectors\";\n\ninterface Props {\n  setCreatePostOpen: Function;\n}\n\nexport default (props: Props) => {\n  const { isVerifiedPodcaster, postsThisMonth } = useUserPostingStateSelector(\n    state => state.postingStateReducer\n  );\n  const { sessionActive } = useUserAuthSelector(state => state.userAuthReducer);\n\n  const dispatch = useDispatch();\n\n  return (\n    <Button\n      variant=\"success\"\n      className=\"mb-2\"\n      disabled={\n        (!isVerifiedPodcaster && sessionActive) ||\n        (postsThisMonth !== null && postsThisMonth <= 0)\n      }\n      onClick={() => {\n        if (sessionActive) {\n          props.setCreatePostOpen(true);\n        } else {\n          dispatch(push(login.link));\n          dispatch(\n            setNegativeAlerts([\"You need to be logged in to create a post!\"])\n          );\n        }\n      }}\n    >\n      <IconWrapper Icon={Io.IoIosAdd} />\n      Create Post\n    </Button>\n  );\n};\n","import React, { useState } from \"react\";\nimport * as Io from \"react-icons/io\";\n\nimport { GuestPostData } from \"./post\";\nimport GuestPostGrid from \"./grid\";\nimport GuestPostDetailsOverlay from \"./detailsOverlay\";\nimport CreatePostOverlay from \"./createPostForm/createPostOverlay\";\nimport ApplyToPostOverlay from \"./applyToPost/form\";\nimport UnpublishPost from \"./unpublishOverlay\";\nimport PostingState from \"./postingAvailabilityState\";\nimport CreatePostButton from \"./createPostButton\";\nimport IconWrapper from \"../../../utils/elementWrappers/IconWrapper\";\n\ninterface GuestPostsContext {\n  currentDetailedPost: GuestPostData | null;\n  setCurrentDetailedPost: Function | null;\n  setApplicationPostId: Function | null;\n  setPostToUnpublish: Function | null;\n}\n\nexport const GuestPostsContext = React.createContext<GuestPostsContext>({\n  currentDetailedPost: null,\n  setCurrentDetailedPost: null,\n  setApplicationPostId: null,\n  setPostToUnpublish: null\n});\n\nexport default () => {\n  const [currentDetailedPost, setCurrentDetailedPost] = useState(null);\n  const [applicationPostId, setApplicationPostId] = useState(null);\n  const [postToUnpublish, setPostToUnpublish] = useState(null);\n\n  const [createPostOpen, setCreatePostOpen] = useState(false);\n\n  return (\n    <GuestPostsContext.Provider\n      value={{\n        currentDetailedPost,\n        setCurrentDetailedPost,\n        setApplicationPostId,\n        setPostToUnpublish\n      }}\n    >\n      <GuestPostDetailsOverlay />\n      <PostingState />\n      <CreatePostButton setCreatePostOpen={setCreatePostOpen} />\n      <p>\n        <IconWrapper Icon={Io.IoIosInformationCircle} />\n        Tap or click posts for more information\n      </p>\n      {postToUnpublish === null ? null : (\n        <UnpublishPost\n          closeOverlay={() => setPostToUnpublish(null)}\n          postId={`${postToUnpublish}`}\n        />\n      )}\n      {createPostOpen === true ? (\n        <CreatePostOverlay\n          closeOverlayCallback={() => setCreatePostOpen(false)}\n        />\n      ) : null}\n      {applicationPostId === null ? null : (\n        <ApplyToPostOverlay\n          closeOverlayCallback={() => setApplicationPostId(null)}\n          postId={`${applicationPostId}`}\n        />\n      )}\n      <GuestPostGrid />\n    </GuestPostsContext.Provider>\n  );\n};\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\n\nimport { guestBoard } from \"./links\";\nimport GuestSpeakingBoard from \"./guestSpeakingBoard/providerComponent\";\n\nexport default () => {\n  return <Route path={guestBoard.link} component={GuestSpeakingBoard} />;\n};\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport { useDispatch } from \"react-redux\";\nimport { push } from \"connected-react-router\";\n\nimport { toggleSubmitButton } from \"../../utils/formUtils\";\nimport { API_CONFIRM_EMAIL } from \"../../../env_vars/api_url\";\nimport { login } from \"../userAccess/userAccessLinks\";\nimport {\n  setSuccessAlerts,\n  setLoadingAlertVisibility\n} from \"../../../state/alertsState/alertActions\";\n\nconst buttonId = \"confirmation-btn\";\nconst messageDivId = \"msg-div\";\n\nexport default () => {\n  const dispatch = useDispatch();\n  return (\n    <div>\n      <Button\n        id={buttonId}\n        onClick={() => {\n          const pathUrl = window.location.pathname;\n          const urlParts = pathUrl.split(\"/\");\n          const confirmationToken = urlParts[urlParts.length - 2];\n          toggleSubmitButton(buttonId);\n          const messageDiv = document.getElementById(\n            messageDivId\n          ) as HTMLElement;\n          dispatch(setLoadingAlertVisibility(\"loading\"));\n          axios\n            .post(API_CONFIRM_EMAIL, {\n              key: confirmationToken\n            })\n            .then(response => {\n              dispatch(push(login.link));\n              dispatch(\n                setSuccessAlerts([\n                  \"Successfully confirmed your email! You can now log in.\"\n                ])\n              );\n            })\n            .catch(error => {\n              messageDiv.insertAdjacentHTML(\n                \"afterbegin\",\n                `<small class=\"text-danger form-text\">Your token is invalid/has expired.</small>`\n              );\n            })\n            .finally(() => dispatch(setLoadingAlertVisibility(\"finishing\")));\n        }}\n      >\n        Confirm Email\n      </Button>\n      <div id={messageDivId}></div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport axios from \"axios\";\nimport { Button } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport * as Io from \"react-icons/io\";\n\nimport IconWrapper from \"../../utils/elementWrappers/IconWrapper\";\nimport { useUserAuthSelector } from \"../../../state/typedSelectors\";\nimport {\n  toggleSubmitButton,\n  displaySingleErrorMessageInErrorDiv\n} from \"../../utils/formUtils\";\nimport { API_UNPUBLISH_GUEST_POST } from \"../../../env_vars/api_url\";\nimport {\n  setSuccessAlerts,\n  setLoadingAlertVisibility\n} from \"../../../state/alertsState/alertActions\";\n\nconst SUBMIT_BTN = \"unpublishSubmit\";\nconst ERROR_DIV_ID = \"unpublishErrorDiv\";\n\nexport default () => {\n  const pathUrl = window.location.pathname;\n  const urlParts = pathUrl.split(\"/\");\n  const postPk = urlParts[urlParts.length - 1];\n\n  const dispatch = useDispatch();\n\n  const { authToken } = useUserAuthSelector(state => state.userAuthReducer);\n  return (\n    <div>\n      {authToken === null ? (\n        <p className=\"text-danger\">\n          Warning! This action requires you to be logged in.\n        </p>\n      ) : (\n        <p className=\"text-danger\">\n          Warning! This will unpublish the post, users can no longer see and\n          apply to it. This is not reversable and will not increase the number\n          of posts you can make this month.\n        </p>\n      )}\n      <Button\n        id={SUBMIT_BTN}\n        variant={\"danger\"}\n        disabled={authToken === null}\n        onClick={() => {\n          toggleSubmitButton(SUBMIT_BTN);\n          setLoadingAlertVisibility(\"loading\");\n          axios\n            .post(\n              API_UNPUBLISH_GUEST_POST,\n              { pk: postPk },\n              {\n                headers: { Authorization: `Token ${authToken}` }\n              }\n            )\n            .then(response => {\n              dispatch(setSuccessAlerts([\"Post was unpublished!\"]));\n            })\n            .catch((error: any) => {\n              displaySingleErrorMessageInErrorDiv(\n                ERROR_DIV_ID,\n                \"Unable to unpublish post! Make sure the url is correct or that you haven't unpublished already.\"\n              );\n            })\n            .finally(() => setLoadingAlertVisibility(\"finishing\"));\n        }}\n      >\n        <IconWrapper Icon={Io.IoIosTrash} />\n        Unpublish Post\n      </Button>\n      <div id={ERROR_DIV_ID} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { Route } from \"react-router-dom\";\n\nimport ConfirmEmail from \"./emailConfirmation\";\nimport DeletePost from \"./deletePost\";\nimport { emailConfirmationUrl, deletePostUrl } from \"./links\";\n\nexport default () => (\n  <React.Fragment>\n    <Route path={emailConfirmationUrl} component={ConfirmEmail} />\n    <Route path={deletePostUrl} component={DeletePost} />\n  </React.Fragment>\n);\n","import { login } from \"../userAccess/userAccessLinks\";\n\nexport const registrationConfirmedUrl = login.link;\nexport const emailConfirmationUrl = \"/accounts/confirm-email/\";\n\nexport const deletePostUrl = \"/delete-post/\";\n","import React from \"react\";\nimport { push } from \"connected-react-router\";\nimport { useDispatch } from \"react-redux\";\n\nimport AccountRoutes from \"./accounts/accountRoutes\";\nimport UserAccessRoutes from \"./userAccess/userAccessRoutes\";\nimport PasswordResetRoutes from \"./passwordReset/passwordResetRoutes\";\nimport GuestPostRoutes from \"./guestSpeakingOpportunittis/routes\";\nimport LegalRoutes from \"./legal/legalRoutes\";\nimport ConfirmationRoutes from \"./confirmations/routes\";\nimport { useRouterSelector } from \"../../state/typedSelectors\";\nimport { home } from \"./../views/userAccess/userAccessLinks\";\n\nexport default () => {\n  const dispatch = useDispatch();\n\n  const path = useRouterSelector(state => state.router.location.pathname);\n  if (path === \"/\") {\n    dispatch(push(home.link));\n  }\n\n  return (\n    <React.Fragment>\n      {/* TODO wo sind email confirmation */}\n      <AccountRoutes />\n      <UserAccessRoutes />\n      <PasswordResetRoutes />\n      <GuestPostRoutes />\n      <LegalRoutes />\n      <ConfirmationRoutes />\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\nimport { useUserAuthSelector } from \"../../../state/typedSelectors\";\n\ninterface AuthVisibilityWrapper {\n  children: React.ReactNode;\n}\n\nexport const ShowOnlyWhenLoggedIn = ({ children }: AuthVisibilityWrapper) => {\n  const loggedIn = useUserAuthSelector(\n    state => state.userAuthReducer.sessionActive === true\n  );\n  return loggedIn ? <React.Fragment>{children}</React.Fragment> : null;\n};\n\nexport const DontShowWhenLoggedIn = ({ children }: AuthVisibilityWrapper) => {\n  const loggedIn = useUserAuthSelector(\n    state => state.userAuthReducer.sessionActive === true\n  );\n  return loggedIn ? null : <React.Fragment>{children}</React.Fragment>;\n};\n","import React from \"react\";\nimport { Nav } from \"react-bootstrap\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { push } from \"connected-react-router\";\n\nimport { sendLogoutRequest } from \"../../state/userAuthState/userAuthActions\";\nimport { useUserAuthSelector } from \"../../state/typedSelectors\";\n\nimport * as linkItems from \"../views/userAccess/userAccessLinks\";\n\nimport {\n  ShowOnlyWhenLoggedIn,\n  DontShowWhenLoggedIn\n} from \"../utils/elementWrappers/authBasedVisibilityWrappers\";\n\nexport default () => {\n  const dispatch = useDispatch();\n  const authToken = useUserAuthSelector(\n    state => state.userAuthReducer.authToken\n  );\n  return (\n    <div className=\"col-12 col-lg-6 d-block d-lg-flex flex-row justify-content-end\">\n      <DontShowWhenLoggedIn>\n        <LinkContainer to={linkItems.login.link}>\n          <Nav.Link eventKey={linkItems.login.link}>\n            {linkItems.login.icon}\n            {linkItems.login.displayName}\n          </Nav.Link>\n        </LinkContainer>\n        <LinkContainer to={linkItems.register.link}>\n          <Nav.Link eventKey={linkItems.register.link}>\n            {linkItems.register.icon}\n            {linkItems.register.displayName}\n          </Nav.Link>\n        </LinkContainer>\n      </DontShowWhenLoggedIn>\n      <ShowOnlyWhenLoggedIn>\n        <Nav.Link\n          onClick={() => {\n            dispatch(sendLogoutRequest(authToken));\n            dispatch(push(linkItems.home.link));\n          }}\n        >\n          {linkItems.logout.icon}\n          {linkItems.logout.displayName}\n        </Nav.Link>\n      </ShowOnlyWhenLoggedIn>\n    </div>\n  );\n};\n","import React, { FC } from \"react\";\nimport styled from \"styled-components\";\n\nimport { NavDropdown } from \"react-bootstrap\";\nimport { useRouterSelector } from \"../../state/typedSelectors\";\nimport { LinkItem } from \"../utils/navLinkUtils\";\n\nconst DropdownWrapper = styled(NavDropdown)`\n  .dropdown-item {\n    color: rgba(0, 0, 0, 0.5);\n  }\n  .dropdown-item.active,\n  .dropdown-item:active {\n    background-color: rgba(0, 0, 0, 0) !important;\n    color: black !important;\n    opacity: 1;\n  }\n  .dropdown-item:hover,\n  .dropdown-item.hover {\n    background-color: rgba(0, 0, 0, 0) !important;\n    color: rgba(0, 0, 0, 0.7);\n  }\n  ${props => (props.isActive ? `color: rgb(0, 0, 0) !important` : \"\")}\n`;\n\ninterface IProps {\n  children: React.ReactNode;\n  link: LinkItem;\n  activeKey?: string;\n}\n\nconst Dropdown: FC<IProps> = ({ activeKey = \"-1\", children, link }) => {\n  const currentRoutePathname = useRouterSelector(\n    state => state.router.location.pathname\n  );\n  const dropdownHeader = (\n    <span\n      className={currentRoutePathname.startsWith(activeKey) ? \"text-dark\" : \"\"}\n    >\n      {link.icon}\n      {link.displayName}\n    </span>\n  );\n  return <DropdownWrapper title={dropdownHeader}>{children}</DropdownWrapper>;\n};\n\nexport default Dropdown;\n","import React from \"react\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nimport * as accountLinks from \"../views/accounts/accountLinks\";\nimport Dropdown from \"./dropdown\";\nimport { NavDropdown, Nav } from \"react-bootstrap\";\nimport { ShowOnlyWhenLoggedIn } from \"../utils/elementWrappers/authBasedVisibilityWrappers\";\nimport { useUserAuthSelector } from \"../../state/typedSelectors\";\n\nexport default () => {\n  const username = useUserAuthSelector(state => state.userAuthReducer.username);\n  return (\n    <ShowOnlyWhenLoggedIn>\n      <Nav activeKey={accountLinks.accountBaseRoute}>\n        <Dropdown\n          link={accountLinks.accountBaseRoute}\n          activeKey={accountLinks.accountBaseRoute.link}\n        >\n          {username !== null\n            ? accountLinks.getAccountLinksAsArray(username).map(link => (\n                <LinkContainer\n                  to={link.link}\n                  key={`accounts dropdown linke ${link.displayName}`}\n                >\n                  <NavDropdown.Item>\n                    {link.icon}\n                    {link.displayName}\n                  </NavDropdown.Item>\n                </LinkContainer>\n              ))\n            : null}\n        </Dropdown>\n      </Nav>\n    </ShowOnlyWhenLoggedIn>\n  );\n};\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { Link } from \"react-router-dom\";\nimport { Container, Button } from \"react-bootstrap\";\n\nimport { COOKIE_AGREEMENT } from \"../../state/stateStorageKeys\";\nimport { enDatenschutzLink } from \"../views/legal/legalRoutes\";\n\nconst BannerWrapper = styled.div`\n  bottom: 0;\n  width: 100%;\n  background-color: rgba(0, 0, 0, 0.4);\n  color: white;\n  z-index: 4;\n  a {\n    color: lightblue;\n  }\n`;\n\nexport default () => {\n  const [cookiesAccepted, setCookiesAccepted] = useState<string | null>(\n    window.localStorage.getItem(COOKIE_AGREEMENT)\n  );\n  return cookiesAccepted === null ? (\n    <BannerWrapper>\n      <Container>\n        <div className=\"d-flex flex-row\">\n          <p>\n            This website uses cookies to personalise content and improve the\n            service. By using this website, you are agreeing to the use of all\n            cookines - please read the{\" \"}\n            <Link to={enDatenschutzLink}>Data Policy</Link> for more\n            information.{\" \"}\n            <Button\n              onClick={() => {\n                window.localStorage.setItem(COOKIE_AGREEMENT, \"set\");\n                setCookiesAccepted(\"true\");\n              }}\n            >\n              OK\n            </Button>\n          </p>\n        </div>\n      </Container>\n    </BannerWrapper>\n  ) : null;\n};\n","import React, { useState } from \"react\";\nimport { ProgressBar } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\n\nimport { useAlertsSelector } from \"../../state/typedSelectors\";\nimport { LOADING_STATES } from \"../../state/alertsState/alertTypes\";\nimport { setLoadingAlertVisibility } from \"../../state/alertsState/alertActions\";\nimport { themeColour } from \"../../env_vars/style\";\n\nconst ProgressBarStyle = styled.div`\n  .progress-bar {\n    background-color: ${themeColour} !important;\n  }\n  width: 100%;\n`;\n\nconst loadSpeedMs = 60;\nconst incrementAmount = 15;\n\nconst barPercentIncreaseLoop = (\n  currentBarPercent: number,\n  targetBarPercent: number,\n  setBarPercent: Function\n) => {\n  const increment =\n    currentBarPercent + incrementAmount < targetBarPercent\n      ? currentBarPercent + incrementAmount\n      : targetBarPercent - currentBarPercent;\n  setBarPercent(currentBarPercent + increment);\n};\n\nexport default () => {\n  const [previousLoadingState, setPreviousLoadingState] = useState<\n    LOADING_STATES\n  >(\"loaded\");\n  const [currentBarPercent, setCurrentBarPercent] = useState(0);\n\n  const dispatch = useDispatch();\n\n  const { loadingAlertState } = useAlertsSelector(state => state.alertsReducer);\n\n  if (loadingAlertState !== previousLoadingState) {\n    setPreviousLoadingState(loadingAlertState);\n  }\n\n  let targetBarPercent = 0;\n  switch (previousLoadingState) {\n    case \"loading\":\n      targetBarPercent = 80;\n      setTimeout(\n        () =>\n          barPercentIncreaseLoop(\n            currentBarPercent,\n            targetBarPercent,\n            setCurrentBarPercent\n          ),\n        loadSpeedMs\n      );\n      break;\n    case \"finishing\":\n      if (currentBarPercent < 100) {\n        setTimeout(() => {\n          dispatch(setLoadingAlertVisibility(\"loaded\"));\n        }, 300);\n        targetBarPercent = 100;\n        setCurrentBarPercent(100);\n      }\n      break;\n    case \"loaded\":\n      if (currentBarPercent !== 0) {\n        setCurrentBarPercent(0);\n        targetBarPercent = 0;\n      }\n  }\n  return currentBarPercent === 0 ? null : (\n    <ProgressBarStyle>\n      <ProgressBar now={currentBarPercent} className=\"rounded-0\" />\n    </ProgressBarStyle>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { Navbar, Nav, Container } from \"react-bootstrap\";\n\nimport { DontShowWhenLoggedIn } from \"../utils/elementWrappers/authBasedVisibilityWrappers\";\nimport { guestBoard } from \"../views/guestSpeakingOpportunittis/links\";\nimport * as linkItems from \"../views/userAccess/userAccessLinks\";\nimport UserAccessLinks from \"./userAccessLinks\";\nimport AccountsDropdown from \"./accountsDropdown\";\nimport CookieBanner from \"./cookieBanner\";\nimport LoadingAlertBar from \"./loadingAlertBar\";\n\nconst NavbarStyle = styled.div`\n  #nav-bar-main-style {\n    display: flex;\n    flex-direction: column;\n    padding: 0 !important;\n    box-shadow: 3px 2px 2px 1px rgba(0, 0, 0, 0.1);\n  }\n  .max-width {\n    display: flex;\n    width: 100%;\n  }\n  .rounded-left-0 {\n    border-bottom-left-radius: 0rem !important;\n    border-top-left-radius: 0rem !important;\n  }\n  .rounded-right-0 {\n    border-bottom-right-radius: 0rem !important;\n    border-top-right-radius: 0rem !important;\n  }\n  #nav-space-filler {\n    padding-bottom: 3.5rem;\n  }\n`;\n\nexport default () => {\n  return (\n    <NavbarStyle>\n      <div id=\"nav-space-filler\"></div>\n      <Navbar bg=\"white\" expand=\"lg\" fixed=\"top\" id=\"nav-bar-main-style\">\n        <CookieBanner />\n        <div className=\"max-width\">\n          <Container className=\"pt-2 pb-2\">\n            <LinkContainer to={linkItems.home.link}>\n              <Navbar.Brand>CastSpot</Navbar.Brand>\n            </LinkContainer>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n              <Nav className=\"max-width\" activeKey={\"\"}>\n                <div className=\"col-12 col-lg-6 d-block d-lg-flex flex-row\">\n                  <DontShowWhenLoggedIn>\n                    <LinkContainer to={linkItems.home.link}>\n                      <Nav.Link eventKey={linkItems.home.link}>\n                        {linkItems.home.icon}\n                        {linkItems.home.displayName}\n                      </Nav.Link>\n                    </LinkContainer>\n                  </DontShowWhenLoggedIn>\n                  <AccountsDropdown />\n                  <LinkContainer to={guestBoard.link}>\n                    <Nav.Link eventKey={guestBoard.link}>\n                      {guestBoard.icon}\n                      {guestBoard.displayName}\n                    </Nav.Link>\n                  </LinkContainer>\n                </div>\n                <UserAccessLinks />\n              </Nav>\n            </Navbar.Collapse>\n          </Container>\n        </div>\n        <div className=\"max-width\">\n          <LoadingAlertBar />\n        </div>\n      </Navbar>\n      <div className=\"mt-4\"></div>\n    </NavbarStyle>\n  );\n};\n","import React from \"react\";\nimport { Alert } from \"react-bootstrap\";\n\nimport {\n  useAlertsSelector,\n  useRouterSelector\n} from \"../../state/typedSelectors\";\nimport { clearAlerts } from \"../../state/alertsState/alertActions\";\nimport { useDispatch } from \"react-redux\";\n\nexport default () => {\n  const reducerState = useAlertsSelector(state => state.alertsReducer);\n  const currentUrlPathname = useRouterSelector(\n    state => state.router.location.pathname\n  );\n\n  if (\n    reducerState.lastAlertUrlPath !== currentUrlPathname &&\n    reducerState.lastAlertUrlPath !== \"\"\n  ) {\n    const dispatch = useDispatch();\n    dispatch(clearAlerts());\n  }\n\n  return (\n    <div>\n      {reducerState.successAlerts.map(alert => (\n        <Alert key={alert + \"key\"} variant={\"success\"}>\n          {alert}\n        </Alert>\n      ))}\n      {reducerState.negativeAlerts.map(alert => (\n        <Alert key={alert + \"key\"} variant={\"danger\"}>\n          {alert}\n        </Alert>\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { push } from \"connected-react-router\";\n\nimport { login } from \"../views/userAccess/userAccessLinks\";\nimport { useUserAuthSelector } from \"../../state/typedSelectors\";\nimport { sendLogoutRequest } from \"../../state/userAuthState/userAuthActions\";\nimport { setNegativeAlerts } from \"../../state/alertsState/alertActions\";\n\nconst SESSION_DURATION = 7;\n\nexport default () => {\n  const { loginTime, authToken } = useUserAuthSelector(\n    state => state.userAuthReducer\n  );\n  const dispatch = useDispatch();\n  const initLogout = () => {\n    dispatch(sendLogoutRequest(authToken));\n    dispatch(push(login.link));\n    dispatch(\n      setNegativeAlerts([\"Your session has expired - please log back in.\"])\n    );\n  };\n\n  if (loginTime !== null) {\n    const lastLoginUnixTime = Date.parse(loginTime);\n    const sessionEndTime =\n      1000 * 60 * 60 * SESSION_DURATION + lastLoginUnixTime;\n    if (sessionEndTime < Date.now()) {\n      initLogout();\n    } else {\n      setTimeout(initLogout, sessionEndTime - Date.now());\n    }\n  }\n  return <div />;\n};\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport * as Io from \"react-icons/io\";\n\ninterface Props {\n  question: string;\n  answer: string;\n}\n\nconst FAQWrapper = styled.div`\n  background-color: white;\n  padding: 1rem;\n  border-radius: 10px;\n  color: black;\n  max-width: 50rem;\n  display: block;\n  margin: 0 auto;\n  h4 {\n    margin: 0 !important;\n  }\n  p {\n    margin: 0 !important;\n  }\n  :hover {\n    cursor: pointer;\n  }\n  .icon-faq {\n    display: inline-block;\n    margin-left: 1rem;\n    top: -0.1rem;\n    position: relative;\n    bottom: 10px;\n    transition: ease-in 0.2s;\n  }\n  .icon-faq:hover {\n    color: lightgrey;\n  }\n`;\n\nexport default (props: Props) => {\n  const [opened, setOpened] = useState(false);\n  return (\n    <FAQWrapper onClick={() => setOpened(!opened)} className=\"mb-2\">\n      <div className=\"d-flex flex-row\">\n        <div style={{ width: \"100%\" }}>\n          <p>\n            {props.question}\n            {opened === false ? (\n              <Io.IoIosAddCircleOutline size={30} className=\"icon-faq\" />\n            ) : (\n              <Io.IoIosRemoveCircleOutline size={30} className=\"icon-faq\" />\n            )}\n          </p>\n        </div>\n        <div>\n          <div\n            style={{ height: \"100%\" }}\n            className=\"d-flex justify-content-center\"\n          ></div>\n        </div>\n      </div>\n      <p className={`font-italic ${opened ? \"d-block\" : \"d-none\"}`}>\n        {props.answer}\n      </p>\n    </FAQWrapper>\n  );\n};\n","import React from \"react\";\nimport { Container, Row, Col, Card } from \"react-bootstrap\";\nimport { useDispatch } from \"react-redux\";\nimport { push } from \"connected-react-router\";\nimport styled from \"styled-components\";\nimport * as Io from \"react-icons/io\";\nimport * as Fa from \"react-icons/fa\";\n\nimport IconWrapper from \"../../utils/elementWrappers/IconWrapper\";\nimport PodcastSVG from \"../../../images/undraw_podcast_q6p7.svg\";\nimport SecuritySVG from \"../../../images/undraw_security_o890.svg\";\nimport Logo from \"../../../images/logo.svg\";\nimport FAQElement from \"./faqElement\";\nimport { register } from \"../userAccess/userAccessLinks\";\nimport { themeColour } from \"../../../env_vars/style\";\n\nconst Banner = styled.div`\n  #logo {\n    display: block;\n    max-width: 200px;\n    height: auto;\n  }\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  color: ${themeColour};\n  border-radius: 25px;\n  padding: 1rem 0;\n  background-color: rgba(0, 0, 0, 0) !important;\n  p {\n    font-size: 16px;\n  }\n  a:hover {\n    text-decoration: none !important;\n  }\n`;\n\nconst FeatureList = styled.ul`\n  font-size: 16px;\n  list-style-type: none;\n  text-align: center;\n  padding-left: 0;\n`;\n\nconst ConversionButton = styled.button`\n  padding: 1rem;\n  display: block;\n  border: solid 1px ${themeColour};\n  background-color: ${themeColour};\n  border: none;\n  color: white;\n  letter-spacing: 0.2rem;\n  text-transform: uppercase;\n  border-radius: 50px;\n  margin: 0 auto;\n  transition: ease-in 0.2s;\n  :hover {\n    background-color: #462d7a;\n  }\n`;\n\nconst MainImage = styled.img`\n  max-width: 100%;\n  overflow: hidden;\n  height: auto;\n`;\n\nconst Section = styled.section`\n  max-width: 100%;\n  position: relative;\n`;\n\nconst SectionMainBg = styled(Section)`\n  background-color: ${themeColour};\n  box-shadow: 0px 0px 3px 3px rgba(0, 0, 0, 0.3);\n  color: white;\n`;\n\nconst CardOnPurpleBg = styled(Card)`\n  color: black;\n  margin-bottom: 2rem;\n  .hr-sect {\n    display: flex;\n    flex-basis: 100%;\n    align-items: center;\n    color: rgba(0, 0, 0, 0.35);\n    font-size: 12px;\n    margin: 8px 0px;\n  }\n  .hr-sect::before,\n  .hr-sect::after {\n    content: \"\";\n    flex-grow: 1;\n    background: rgba(0, 0, 0, 0.35);\n    height: 1px;\n    font-size: 0px;\n    line-height: 0px;\n    margin: 0px 16px;\n  }\n`;\n\nexport default () => {\n  const dispatch = useDispatch();\n  return (\n    <div className=\"mt-2\">\n      <Banner style={{ maxHeight: \"30rem\", height: \"90vh\" }}>\n        <div\n          style={{\n            height: \"100%\",\n            maxWidth: \"90%\",\n            display: \"block\",\n            margin: \"0 auto\"\n          }}\n          className=\"d-flex flex-column justify-content-center\"\n        >\n          <div>\n            <h1 className=\"text-center mt-4\">\n              Collaborate with other Podcasters.\n            </h1>\n            <h3 className=\"text-center\">\n              Feature them on your show or become a Guest Speaker.\n            </h3>\n          </div>\n          <FeatureList className=\"d-block mr-auto ml-auto mt-4 mb-4\">\n            <li>\n              <IconWrapper Icon={Fa.FaPodcast} />\n              Connect with real Podcasters\n            </li>\n            <li>\n              <IconWrapper Icon={Io.IoIosPeople} />\n              Grow your Audience\n            </li>\n            <li>\n              <IconWrapper Icon={Fa.FaHandshake} />\n              Build a personal Network\n            </li>\n            <li>\n              <IconWrapper Icon={Io.IoIosUnlock} />\n              Open to all podcasters from all hosting platforms\n            </li>\n          </FeatureList>\n          <ConversionButton\n            className=\"ml-auto mr-auto\"\n            onClick={() => dispatch(push(register.link))}\n          >\n            Join FOR FREE\n          </ConversionButton>\n        </div>\n      </Banner>\n      <div className=\"pd-mb-4 pd-mt-4\" />\n      <Section className=\"mt-2\">\n        <Container className=\"position-relative\">\n          <Row className=\"mb-4\">\n            <Col lg={6}>\n              <div\n                style={{ height: \"100%\" }}\n                className=\"d-flex flex-column justify-content-center\"\n              >\n                <MainImage src={PodcastSVG} />\n              </div>\n            </Col>\n            <Col lg={6}>\n              <Banner>\n                <h2>The first Podcasters-Only Guest Speaking Platform.</h2>\n                <p>\n                  Start reaching <b>real podcasters</b> in seconds. Find your\n                  ideal guest or increase your exposure by speaking on different\n                  shows.\n                </p>\n                <a href=\"#benefits-container\">\n                  <ConversionButton className=\"ml-auto mr-auto\">\n                    Discover the Benefits\n                  </ConversionButton>\n                </a>\n              </Banner>\n            </Col>\n          </Row>\n          <div className=\"pb-md-4 pt-md-4\"></div>\n          <Row className=\"mb-4 mt-md-4\">\n            <Col className=\"d-block d-lg-none\">\n              <div style={{ height: \"100%\" }}>\n                <MainImage src={SecuritySVG} />\n              </div>\n            </Col>\n            <Col lg={6}>\n              <Banner>\n                <h2>Find other Podcasters - not Spammers or Catfishs.</h2>\n                <p>\n                  Authenticate yourself as a podcast host in a few seconds,\n                  using your RSS feed.\n                </p>\n              </Banner>\n            </Col>\n            <Col lg={6} className=\"d-none d-lg-block\">\n              <div\n                style={{ height: \"100%\" }}\n                className=\"d-flex flex-column justify-content-center\"\n              >\n                <MainImage src={SecuritySVG} />\n              </div>\n            </Col>\n          </Row>\n          <div className=\"pb-md-4 pt-md-4\"></div>\n        </Container>\n      </Section>\n      <div className=\"pd-mb-4 pd-mt-4\" />\n      <SectionMainBg>\n        <Container id=\"benefits-container\" className=\"pb-4 pt-4\">\n          <h2 className=\"text-center pt-4\">\n            Why Podcasters are the best Guests\n          </h2>\n          <div className=\"pb-md-4 pt-md-4\"></div>\n          <Row>\n            <Col md={4} xs={12}>\n              <CardOnPurpleBg>\n                <Card.Header className=\"text-center bg-white\">\n                  <IconWrapper Icon={Io.IoIosChatboxes} />\n                  Speaking Experience\n                </Card.Header>\n                <Card.Body>\n                  <p>\n                    Podcasters know how to keep discussions engaging and are\n                    comfortable talking for an audience.\n                  </p>\n                </Card.Body>\n              </CardOnPurpleBg>\n            </Col>\n            <Col md={4} xs={12}>\n              <CardOnPurpleBg>\n                <Card.Header className=\"text-center bg-white\">\n                  <IconWrapper Icon={Io.IoIosMic} />\n                  Audio Quality Awareness\n                </Card.Header>\n                <Card.Body>\n                  <p>\n                    Typical guests can be oblivious to the quality of their\n                    audio or how to record effectively.\n                  </p>\n                </Card.Body>\n              </CardOnPurpleBg>\n            </Col>\n            <Col md={4} xs={12}>\n              <CardOnPurpleBg>\n                <Card.Header className=\"text-center bg-white\">\n                  <IconWrapper Icon={Io.IoIosPeople} />\n                  Audience Sharing\n                </Card.Header>\n                <Card.Body>\n                  <p>\n                    When two podcasters cover similar topics, it is likely that\n                    a collaborative episode can result in high listener growth\n                    for both.\n                  </p>\n                </Card.Body>\n              </CardOnPurpleBg>\n            </Col>\n          </Row>\n          <div className=\"pb-md-4 pt-md-4\"></div>\n          <Row>\n            <Col md={4} xs={12}>\n              <CardOnPurpleBg>\n                <Card.Header className=\"text-center bg-white bg-white\">\n                  <IconWrapper Icon={Fa.FaUserCheck} />\n                  Easier Guest Vetting\n                </Card.Header>\n                <Card.Body>\n                  <p>\n                    Given how much audio there is to listen to, it's easy to\n                    tell if a given podcaster would be a good guest on your show\n                    (or not).\n                  </p>\n                </Card.Body>\n              </CardOnPurpleBg>\n            </Col>\n            <Col md={4} xs={12}>\n              <CardOnPurpleBg>\n                <Card.Header className=\"text-center bg-white bg-white\">\n                  <IconWrapper Icon={Fa.FaUserTie} />\n                  Increases Credibility\n                </Card.Header>\n                <Card.Body>\n                  <p>\n                    Speaking on a popular podcast or featuring a presitigous\n                    podcaster shows listeners that you know your stuff.\n                  </p>\n                </Card.Body>\n              </CardOnPurpleBg>\n            </Col>\n            <Col md={4} xs={12}>\n              <CardOnPurpleBg>\n                <Card.Header className=\"text-center bg-white\">\n                  <IconWrapper Icon={Io.IoMdSchool} /> Knowledge Exchange\n                </Card.Header>\n                <Card.Body>\n                  <p>\n                    Learn from each other - discover and share strategies on how\n                    to organise, prepare and grow your shows.\n                  </p>\n                </Card.Body>\n              </CardOnPurpleBg>\n            </Col>\n          </Row>\n          <div className=\"pb-md-4 pt-md-4\"></div>\n        </Container>\n      </SectionMainBg>\n      <Section>\n        <Container className=\"pb-4 pt-4\">\n          <h2 className=\"text-center pt-4\">How to get started</h2>\n          <div className=\"pb-md-4 pt-md-4\"></div>\n          <Row>\n            <Col md={4}>\n              <CardOnPurpleBg>\n                <Card.Header className=\"text-center bg-white\">\n                  Step 1\n                </Card.Header>\n                <Card.Body>\n                  Verify your Podcast - we only let real hosts interact with\n                  others on the site and are intolerant of spammers, marketers\n                  or trolls (unless of course, you Podcast about these things).\n                </Card.Body>\n              </CardOnPurpleBg>\n            </Col>\n            <Col md={4}>\n              <CardOnPurpleBg>\n                <Card.Header className=\"text-center bg-white\">\n                  Step 2 <br></br>\n                  <b>For Finding Guests</b>\n                </Card.Header>\n                <Card.Body>\n                  <p className=\"mb-0\">\n                    Create a new guest speaking opportunity that other users can\n                    apply to. Simply mention what type of topic you want your\n                    upcoming episode to cover and start receiving applications\n                    from other users wanting to collaborate.\n                  </p>\n                </Card.Body>\n              </CardOnPurpleBg>\n            </Col>\n            <Col md={4}>\n              <CardOnPurpleBg>\n                <Card.Header className=\"text-center bg-white\">\n                  Step 2 <br></br>\n                  <b>For Guest Speaking</b>\n                </Card.Header>\n                <Card.Body>\n                  <p className=\"mb-0\">\n                    Simply update your contact details and apply to open guest\n                    speaking opportunities in two clicks. Your details are\n                    shared with the host (but nobody else), so they can get in\n                    touch with you.{\" \"}\n                  </p>\n                </Card.Body>\n              </CardOnPurpleBg>\n            </Col>\n          </Row>\n          <div className=\"pb-md-4 pt-md-4\"></div>\n        </Container>\n      </Section>\n      <SectionMainBg className=\"pb-4\">\n        <Container className=\"pb-4 pt-4\">\n          <h2 className=\"text-center pt-4 pb-2\">FAQ</h2>\n          <div className=\"pt-3\"></div>\n          <FAQElement\n            question={\"How does CastSpot compare to similar servies?\"}\n            answer={\n              \"Conventional guest speaking services are often filled with randoms and spammers, cost money or require the user to go through long, manual authentication processes. CastSpot lets users connect with each other for free, is extremly fast to get started, simple to use, while ensuring that users are real Podcasters.\"\n            }\n          />\n          <FAQElement\n            question={\n              \"How do I know users on CastSpot are actually Podcasters?\"\n            }\n            answer={\n              \"CastSpot reads in the RSS Feed of Podcasters and validates the information using the Podcast directory listennotes. It contains information on over 650,000 podcasts. It then sends a code to the email listed in the RSS feed (just like Spotify) that is used to confirm that they are actually the host.\"\n            }\n          />\n          <FAQElement\n            question={\n              \"My RSS feed cannot be read - why is this (and what is CORS)?\"\n            }\n            answer={\n              \"For security reasons, most websites prevent other websites from accessing their content - this is because of a standard called CORS. For example, WordPress sites will block CastSpot from downloading any RSS feeds hosted on them by default. It is advised to instead upload the link that is hosted on your podcast host service instead, as these are usually aware of the fact that other services need to the read the RSS and have CORS disabled.\"\n            }\n          />\n          <FAQElement\n            question={\"Can I manage multiple Podcasts from a single Account?\"}\n            answer={\n              \"This is a feature that will be added in (hopefully) the near future - I do not recommend making a seperate account just for this.\"\n            }\n          />\n          <FAQElement\n            question={\n              \"Where can I read or find out when someone applies to speaking on my Podcast?\"\n            }\n            answer={\"Guest speaking applications are sent by email.\"}\n          />\n          <FAQElement\n            question={\n              \"Why do I have to set two emails? One to register my account and one in my contact details?\"\n            }\n            answer={\n              \"CastSpot sends all emails to the email that you registered your account to. In your contact details, you have the option to ask other users to contact you via an alternative email, or simply leave it blank if you don't want to share your email.\"\n            }\n          />\n          <FAQElement\n            question={\n              \"Where can I read or find out when someone applies to speaking on my Podcast?\"\n            }\n            answer={\n              \"Guest speaking applications are sent by email to the account that you registered with. This is NOT the email that you may have added in your contact details.\"\n            }\n          />\n          <FAQElement\n            question={\n              \"I am a legit Podcaster, but I keep getting rejected when I try to validate my RSS Feed - what is going on?\"\n            }\n            answer={\n              \"Please make sure that your RSS feed is formatted correctly. Then, ensure that your Podcast is listed at listennotes.com. If you are on the most popular platforms (Apple, Spotify, Google, etc.), this should happen automatically and if it doesn't, you just need to wait a bit (or contact the owner of listennotes). I know that from personal experience, it can take some time to get listed.\"\n            }\n          />\n          <FAQElement\n            question={\"Are there restrictions to my use of the service?\"}\n            answer={\n              \"Yes. Unfortunately, hosting and email cost money. that is why you can only send 10 application requests and post a single time each month.\"\n            }\n          />\n          <FAQElement\n            question={\n              \"There is no such thing as a free lunch - what's in it for you?\"\n            }\n            answer={\n              \"First and foremost, I am a podcaster looking who found that finding guests was a problem worth solving (for others but also myself). At some point, if the idea is reasonably successful, I want to add a paid option with more features. Right now, I am just validating my ideas.\"\n            }\n          />\n        </Container>\n      </SectionMainBg>\n    </div>\n  );\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { LinkContainer } from \"react-router-bootstrap\";\nimport { Container, Nav, Navbar } from \"react-bootstrap\";\nimport * as Io from \"react-icons/io\";\nimport * as Fa from \"react-icons/fa\";\n\nimport IconWrapper from \"./utils/elementWrappers/IconWrapper\";\nimport {\n  deDatenschutzLink,\n  enDatenschutzLink\n} from \"./views/legal/legalRoutes\";\n\nexport const footerHeight = `5rem`;\n\nconst Footer = styled.footer`\n  position: absolute;\n  bottom: 0;\n  text-align: center;\n  width: 100%;\n  height: ${footerHeight};\n  .footer-border {\n    border-width: 1px 0px 0px 0px;\n    border-style: solid;\n    border-color: lightgrey;\n  }\n`;\n\nexport default () => (\n  <Footer>\n    <Container className=\"footer-border\">\n      <Navbar bg=\"light\" expand=\"lg\" className=\"m-auto d-block\">\n        <Nav className=\"max-width\" activeKey={\"\"}>\n          <LinkContainer to={deDatenschutzLink}>\n            <Nav.Link eventKey={deDatenschutzLink}>\n              Data Policy and Imprint (EN)\n            </Nav.Link>\n          </LinkContainer>\n          <LinkContainer to={enDatenschutzLink}>\n            <Nav.Link eventKey={enDatenschutzLink}>\n              Datenschutz und Impressum (DE)\n            </Nav.Link>\n          </LinkContainer>\n          <div style={{ width: \"100%\" }} className=\"d-flex justify-content-end\">\n            <Nav.Link target=\"_blank\" href=\"https://twitter.com/MarcBeaujean\">\n              <IconWrapper Icon={Io.IoLogoTwitter} />\n            </Nav.Link>\n            <Nav.Link target=\"_blank\" href=\"https://byteschool.io\">\n              <IconWrapper Icon={Fa.FaExternalLinkAlt} />\n            </Nav.Link>\n          </div>\n        </Nav>\n      </Navbar>\n    </Container>\n  </Footer>\n);\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Container } from \"react-bootstrap\";\nimport { Route } from \"react-router-dom\";\n\nimport MasterRoutes from \"./views/masterRoutes\";\nimport NavBar from \"./navigation/navMenu\";\nimport AlertsContainer from \"./alerting/alertsContainer\";\nimport SessionChecker from \"./utils/sessionChecker\";\nimport LandingPage from \"./views/home/landingPage\";\nimport Footer, { footerHeight } from \"./footer\";\n\nconst Background = styled.div`\n  width: 100%;\n  min-height: 100vh;\n  margin: 0;\n  position: relative;\n  .content-wrapper {\n    padding-bottom: ${footerHeight};\n  }\n`;\n\nfunction App() {\n  return (\n    <Background className=\"bg-light\">\n      <Container fluid className=\"px-0 main content-wrapper\">\n        <SessionChecker />\n        <NavBar />\n        <Route path={\"/home\"}>\n          <LandingPage />\n        </Route>\n        <Container className=\"mt-2\">\n          <AlertsContainer />\n          <MasterRoutes />\n        </Container>\n      </Container>\n      <Footer />\n    </Background>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as userTypes from \"./userAuthTypes\";\nimport {\n  AUTH_TOKEN_KEY,\n  USERNAME_KEY,\n  LOGIN_TIME_KEY\n} from \"../stateStorageKeys\";\n\nexport const initialState: userTypes.UserState = {\n  username: localStorage.getItem(USERNAME_KEY),\n  sessionActive:\n    localStorage.getItem(USERNAME_KEY) !== null &&\n    localStorage.getItem(AUTH_TOKEN_KEY) !== null,\n  authToken: localStorage.getItem(AUTH_TOKEN_KEY),\n  loginTime: localStorage.getItem(LOGIN_TIME_KEY)\n};\n\nconst loggedOutState: userTypes.UserState = {\n  username: null,\n  sessionActive: false,\n  authToken: null,\n  loginTime: null\n};\n\nexport default (\n  previousState: userTypes.UserState = initialState,\n  action: userTypes.StartUserSessionAction | userTypes.EndUserSessionAction\n): userTypes.UserState => {\n  switch (action.type) {\n    case userTypes.START_USER_SESSION:\n      return action.payload;\n    case userTypes.END_USER_SESSION:\n      return loggedOutState;\n  }\n  return previousState;\n};\n","import * as types from \"./accountDetailTypes\";\n\nexport const initialState: types.UserProfileState = {\n  firstName: \"\",\n  lastName: \"\",\n  email: \"\",\n  profileUsername: \"\"\n};\n\nexport default (\n  previousState: types.UserProfileState = initialState,\n  action: types.UpdateUserProfileAction\n) => {\n  switch (action.type) {\n    case types.UPDATE_USER_PROFILE:\n      return action.payload.profileUsername !== previousState.profileUsername\n        ? action.payload\n        : previousState;\n  }\n  return previousState;\n};\n","import * as alertTypes from \"./alertTypes\";\n\nexport const initialState: alertTypes.AlertState = {\n  successAlerts: [],\n  negativeAlerts: [],\n  lastAlertUrlPath: \"\",\n  loadingAlertState: \"loaded\"\n};\n\nexport default (\n  previousState: alertTypes.AlertState = initialState,\n  action:\n    | alertTypes.ClearAllAlerts\n    | alertTypes.SetNegativeAlerts\n    | alertTypes.SetSuccessAlerts\n    | alertTypes.SetLoadingAlertVisibility\n): alertTypes.AlertState => {\n  switch (action.type) {\n    case alertTypes.SET_NEGATIVE_ALERTS:\n      return {\n        ...previousState,\n        lastAlertUrlPath: document.location.pathname,\n        negativeAlerts: action.payload\n      };\n    case alertTypes.SET_SUCCESS_ALERTS:\n      return {\n        ...previousState,\n        lastAlertUrlPath: document.location.pathname,\n        successAlerts: action.payload\n      };\n    case alertTypes.SET_LOADING_ALERT_VISIBILITY:\n      return {\n        ...previousState,\n        loadingAlertState: action.showAlert\n      };\n    case alertTypes.CLEAR_ALERTS:\n      return initialState;\n  }\n  return previousState;\n};\n","import * as types from \"./userPodcastsTypes\";\n\nexport const initialState: types.UserPodcastsState = {\n  podcastConfirmationIsPending: null,\n  podcasts: []\n};\n\nexport default (\n  previousState: types.UserPodcastsState = initialState,\n  action:\n    | types.RssFeedSubmitted\n    | types.SetUserPodcastsInitData\n    | types.AddPodcast\n): types.UserPodcastsState => {\n  switch (action.type) {\n    case types.RSS_FEED_SUBMITTED:\n      return {\n        ...previousState,\n        podcastConfirmationIsPending: true\n      };\n    case types.SET_USER_PODCASTS_INIT_DATA:\n      return action.payload;\n    case types.ADD_USER_PODCAST:\n      return {\n        podcastConfirmationIsPending: false,\n        podcasts: [...previousState.podcasts, action.podcast]\n      };\n  }\n  return previousState;\n};\n","import * as types from \"./types\";\n\nexport const initialState: types.ContactDetailsState = {\n  email: null,\n  discord: null,\n  skype: null\n};\n\nexport default (\n  previousState: types.ContactDetailsState = initialState,\n  action: types.SetContactDetails\n): types.ContactDetailsState => {\n  switch (action.type) {\n    case types.SET_CONTACT_DETAILS:\n      return action.payload;\n  }\n  return previousState;\n};\n","export const SET_CONTACT_DETAILS = \"setContactDetails\";\n\nexport interface ContactDetailsState {\n  email: string | null;\n  discord: string | null;\n  skype: string | null;\n}\n\nexport interface SetContactDetails {\n  type: typeof SET_CONTACT_DETAILS;\n  payload: ContactDetailsState;\n}\n","import * as types from \"./types\";\n\nexport const initialState: types.UserPostingState = {\n  isVerifiedPodcaster: null,\n  hasCreatedContactDetails: null,\n  postsThisMonth: null,\n  applicationsThisMonth: null\n};\n\nexport default (\n  previousState: types.UserPostingState = initialState,\n  action:\n    | types.IncrementApplicationsThisMonth\n    | types.IncrementPostsThisMonth\n    | types.SetUserPostingState\n    | types.ConfirmUserViewedContacts\n): types.UserPostingState => {\n  switch (action.type) {\n    case types.SET_USER_POSTING_STATE:\n      return action.payload;\n    case types.INCREMENT_POSTS_MADE:\n      if (previousState.applicationsThisMonth == null) return previousState;\n      return {\n        ...previousState,\n        applicationsThisMonth: previousState.applicationsThisMonth - 1\n      };\n    case types.INCREMENT_APPLICATIONS_MADE:\n      if (previousState.postsThisMonth == null) return previousState;\n      return {\n        ...previousState,\n        postsThisMonth: previousState.postsThisMonth - 1\n      };\n    case types.CONFIRM_USER_VIEWED_CONTACTS:\n      return {\n        ...previousState,\n        hasCreatedContactDetails: true\n      };\n  }\n  return previousState;\n};\n","import { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport { createBrowserHistory } from \"history\";\nimport { connectRouter, routerMiddleware } from \"connected-react-router\";\nimport thunk from \"redux-thunk\";\n\nimport * as reducerNames from \"./reducerNames\";\nimport userAuthReducer from \"./userAuthState/userAuthReducer\";\nimport userProfileReducer from \"./accountDetailsState/accountDetailsReducer\";\nimport alertsReducer from \"./alertsState/alertReducer\";\nimport userPodcastsReducer from \"./userPodcastsState/userPodcastsReducer\";\nimport userContactDetailsReducer from \"./userContactDetailsState/reducer\";\nimport userPostingReducer from \"./userPostingState/reducer\";\n\nexport const history = createBrowserHistory();\n\nconst createRootReducer = history =>\n  combineReducers({\n    [reducerNames.USER_AUTH_REDUCER]: userAuthReducer,\n    [reducerNames.USER_PROFILE_REDUCER]: userProfileReducer,\n    [reducerNames.ROUTE_HISTORY_REDUCER]: connectRouter(history),\n    [reducerNames.ALERTS_REDUCER]: alertsReducer,\n    [reducerNames.USER_PODCAST_REDUCER]: userPodcastsReducer,\n    [reducerNames.USER_CONTACT_DETAILS_REDUCER]: userContactDetailsReducer,\n    [reducerNames.POSTING_STATE_REDUCER]: userPostingReducer\n  });\n\nexport default function configureStore() {\n  return createStore(\n    createRootReducer(history),\n    composeWithDevTools(applyMiddleware(thunk, routerMiddleware(history)))\n  );\n}\n","export const USER_AUTH_REDUCER = \"userAuthReducer\";\nexport const USER_PROFILE_REDUCER = \"userAuthProfileReducer\";\nexport const USER_CONTACT_DETAILS_REDUCER = \"userContactDetailsReducer\";\nexport const USER_PODCAST_REDUCER = \"userPodcastsReducer\";\nexport const ROUTE_HISTORY_REDUCER = \"router\";\nexport const ALERTS_REDUCER = \"alertsReducer\";\nexport const POSTING_STATE_REDUCER = \"postingStateReducer\";\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./style/index.scss\";\n\nimport { Provider } from \"react-redux\";\nimport { ConnectedRouter } from \"connected-react-router\";\nimport configureStore, { history } from \"./state/store\";\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/undraw_security_o890.a4093739.svg\";"],"sourceRoot":""}