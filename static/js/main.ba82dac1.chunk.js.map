{"version":3,"sources":["components/persistent/navMenu.tsx","components/forms/formUtils.tsx","components/forms/registration/formSubmission.tsx","components/forms/registration/formFieldNames.tsx","components/forms/registration/registrationForm.tsx","components/forms/loginForm.tsx","components/App.tsx","serviceWorker.js","state/reducers/rootReducer.js","state/store.js","index.js"],"names":["NavbarStyle","styled","div","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","className","Link","NavDropdown","title","Item","Divider","handleInputChange","event","formData","setFormData","target","currentTarget","value","type","checked","name","hasOwnProperty","console","error","formInputValues","preventDefault","formKeys","key","push","forEach","fieldName","errorDisplayElement","document","getElementById","classList","add","faultyInputFieldNames","formState","username","length","test","password","email","repeatPassword","legalAgreement","getFaultyInputFieldNames","remove","displayInputErrorMessages","registrationPayload","password1","password2","submitBtn","disabled","responseErrorMessages","innerHTML","axios","post","API_URL","then","response","formId","form","Array","from","getElementsByTagName","inputField","resetForm","formSuccessText","catch","errorKey","data","insertAdjacentHTML","finally","useState","updateFormElement","e","Card","Body","Title","Form","onSubmit","handleSubmit","Group","controlId","Label","Control","placeholder","onChange","Text","EMAIL","USERNAME","PASSWORD","REPEATED_PASSWORD","Check","label","LEGAL_AGREEMENT","Button","variant","App","Container","fluid","path","component","RegisterPage","LoginPage","Boolean","window","location","hostname","match","combineReducers","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ba82dac1.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { Navbar, Nav, NavDropdown } from \"react-bootstrap\";\n\nconst NavbarStyle = styled.div`\n  .rounded-left-0 {\n    border-bottom-left-radius: 0rem !important;\n    border-top-left-radius: 0rem !important;\n  }\n  .rounded-right-0 {\n    border-bottom-right-radius: 0rem !important;\n    border-top-right-radius: 0rem !important;\n  }\n`;\n\nexport default () => (\n  <NavbarStyle>\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand href=\"#home\">4Cast</Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n        <Nav className=\"mr-auto\">\n          <Nav.Link href=\"#home\">Home</Nav.Link>\n          <Nav.Link href=\"#link\">Link</Nav.Link>\n          <NavDropdown title=\"Dropdown\" id=\"basic-nav-dropdown\">\n            <NavDropdown.Item href=\"#action/3.1\">Action</NavDropdown.Item>\n            <NavDropdown.Item href=\"#action/3.2\">\n              Another action\n            </NavDropdown.Item>\n            <NavDropdown.Item href=\"#action/3.3\">Something</NavDropdown.Item>\n            <NavDropdown.Divider />\n            <NavDropdown.Item href=\"#action/3.4\">\n              Separated link\n            </NavDropdown.Item>\n          </NavDropdown>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  </NavbarStyle>\n);\n","export const handleInputChange = (\n  event: React.FormEvent<HTMLInputElement>,\n  formData: Object,\n  setFormData: Function\n) => {\n  const target = event.currentTarget;\n  const value = target.type === \"checkbox\" ? target.checked : target.value;\n  const name = target.name;\n  if (!formData.hasOwnProperty(name)) {\n    console.error(\n      \"handleInputChange in formUtils.sx tried to update a form element that was not in the form data object\"\n    );\n  } else {\n    setFormData({\n      ...formData,\n      [name]: value\n    });\n  }\n};\n\nexport const hideAllInputErrorMessages = (\n  formInputFieldNames: Array<String>\n) => {\n  formInputFieldNames.forEach(fieldName => {\n    const errorDisplayElement = document.getElementById(`${fieldName}-error`);\n    if (errorDisplayElement !== null) {\n      errorDisplayElement.classList.add(\"d-none\");\n    }\n  });\n};\n\nexport const displayInputErrorMessages = (\n  faultyInputFieldNames: Array<String>\n) => {\n  faultyInputFieldNames.forEach(fieldName => {\n    const errorDisplayElement = document.getElementById(`${fieldName}-error`);\n    if (errorDisplayElement === null) {\n      console.error(\n        `The html element used to display an error for input field \"${fieldName}\" could not be found`\n      );\n    } else {\n      errorDisplayElement.classList.remove(\"d-none\");\n    }\n  });\n};\n\nexport const resetForm = (formId: string) => {\n  const form = document.getElementById(formId) as HTMLFormElement;\n  Array.from(form.getElementsByTagName(\"input\")).forEach(inputField => {\n    if (inputField.type === \"checkbox\") {\n      inputField.checked = false;\n    } else {\n      inputField.value = \"\";\n    }\n  });\n};\n","import {\n  hideAllInputErrorMessages,\n  displayInputErrorMessages,\n  resetForm\n} from \"../formUtils\";\nimport {\n  USERNAME,\n  PASSWORD,\n  EMAIL,\n  LEGAL_AGREEMENT,\n  REPEATED_PASSWORD,\n  FORM_ID,\n  SUBMIT,\n  FORM_ERROR_DIV_ID,\n  FORM_SUCCESS_ID\n} from \"./formFieldNames\";\nimport axios from \"axios\";\nimport { UserRegistrationForm } from \"./registrationForm\";\nimport { API_URL } from \"../../../env\";\n\ninterface RegistrationPayload {\n  username: string;\n  password1: string;\n  password2: string;\n  email: string;\n}\n\nconst getFaultyInputFieldNames = (formState: UserRegistrationForm) => {\n  const faultyInputFieldNames: Array<String> = [];\n  if (formState.username.length < 6 || /\\s/g.test(formState.username)) {\n    faultyInputFieldNames.push(USERNAME);\n  }\n  if (!/^(?=.*[a-z])(?=.*[A-Z]).{6,}$/.test(formState.password)) {\n    faultyInputFieldNames.push(PASSWORD);\n  }\n  if (!/^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(formState.email)) {\n    faultyInputFieldNames.push(EMAIL);\n  }\n  if (formState.password !== formState.repeatPassword) {\n    faultyInputFieldNames.push(REPEATED_PASSWORD);\n  }\n  if (!formState.legalAgreement) {\n    faultyInputFieldNames.push(LEGAL_AGREEMENT);\n  }\n  return faultyInputFieldNames;\n};\n\nexport default (\n  event: React.FormEvent<HTMLFormElement>,\n  formInputValues: UserRegistrationForm\n) => {\n  event.preventDefault();\n  const formKeys = [];\n  for (let key in formInputValues) {\n    formKeys.push(key);\n  }\n  hideAllInputErrorMessages(formKeys);\n  const faultyInputFieldNames = getFaultyInputFieldNames(formInputValues);\n  if (faultyInputFieldNames.length > 0) {\n    displayInputErrorMessages(faultyInputFieldNames);\n  } else {\n    const registrationPayload: RegistrationPayload = {\n      username: formInputValues.username,\n      password1: formInputValues.password,\n      password2: formInputValues.password,\n      email: formInputValues.email\n    };\n    const submitBtn = document.getElementById(SUBMIT) as HTMLInputElement;\n    submitBtn.disabled = true;\n    const responseErrorMessages = document.getElementById(\n      FORM_ERROR_DIV_ID\n    ) as HTMLElement;\n    responseErrorMessages.innerHTML = \"\";\n    axios\n      .post(API_URL + \"api/rest-auth/registration/\", registrationPayload)\n      .then(response => {\n        resetForm(FORM_ID);\n        const formSuccessText = document.getElementById(FORM_SUCCESS_ID);\n        if (formSuccessText !== null) {\n          formSuccessText.classList.remove(\"d-none\");\n        }\n      })\n      .catch((error: any) => {\n        for (let errorKey in error.response.data) {\n          responseErrorMessages.insertAdjacentHTML(\n            \"afterbegin\",\n            `<small class=\"text-danger form-text\">${error.response.data[errorKey][0]}</small>`\n          );\n        }\n      })\n      .finally(() => {\n        submitBtn.disabled = false;\n      });\n  }\n};\n","export const USERNAME = \"username\";\nexport const PASSWORD = \"password\";\nexport const REPEATED_PASSWORD = \"repeatPassword\";\nexport const EMAIL = \"email\";\nexport const LEGAL_AGREEMENT = \"legalAgreement\";\nexport const SUBMIT = \"submit\";\nexport const FORM_ID = \"registrationForm\";\nexport const FORM_ERROR_DIV_ID = \"form-errors\";\nexport const FORM_SUCCESS_ID = \"form-success\";\n","import React, { useState } from \"react\";\nimport { Form, Button, Card } from \"react-bootstrap\";\nimport { handleInputChange } from \"../formUtils\";\nimport handleSubmit from \"./formSubmission\";\nimport {\n  USERNAME,\n  PASSWORD,\n  EMAIL,\n  LEGAL_AGREEMENT,\n  REPEATED_PASSWORD,\n  SUBMIT,\n  FORM_ID,\n  FORM_ERROR_DIV_ID,\n  FORM_SUCCESS_ID\n} from \"./formFieldNames\";\n\nexport interface UserRegistrationForm {\n  [USERNAME]: string;\n  [PASSWORD]: string;\n  [REPEATED_PASSWORD]: string;\n  [EMAIL]: string;\n  [LEGAL_AGREEMENT]: boolean;\n}\n\nexport default () => {\n  const [formData, setFormData] = useState<UserRegistrationForm>({\n    [USERNAME]: \"\",\n    [PASSWORD]: \"\",\n    [REPEATED_PASSWORD]: \"\",\n    [EMAIL]: \"\",\n    [LEGAL_AGREEMENT]: true\n  });\n  const updateFormElement = (e: React.FormEvent<HTMLInputElement>) =>\n    handleInputChange(e, formData, setFormData);\n  return (\n    <Card>\n      <Card.Body>\n        <Card.Title>Register</Card.Title>\n        <Form\n          id={FORM_ID}\n          onSubmit={(e: React.FormEvent<HTMLFormElement>) =>\n            handleSubmit(e, formData)\n          }\n        >\n          <Form.Group controlId={EMAIL}>\n            <Form.Label>Email address</Form.Label>\n            <Form.Control\n              name={EMAIL}\n              type=\"email\"\n              placeholder=\"Enter email\"\n              value={formData.email}\n              onChange={updateFormElement}\n            />\n            <Form.Text className=\"d-none text-danger\" id={EMAIL + \"-error\"}>\n              Invalid Email\n            </Form.Text>\n          </Form.Group>\n          <Form.Group controlId={USERNAME}>\n            <Form.Label>Username</Form.Label>\n            <Form.Control\n              name={USERNAME}\n              type=\"text\"\n              placeholder=\"johndoe\"\n              value={formData.username}\n              onChange={updateFormElement}\n            />\n            <Form.Text className=\"d-none text-danger\" id={USERNAME + \"-error\"}>\n              Please choose a username that is at least six characters long and\n              contains no whitespace (tabs, spaces, etc.).\n            </Form.Text>\n          </Form.Group>\n          <Form.Group controlId={PASSWORD}>\n            <Form.Label>Password</Form.Label>\n            <Form.Control\n              name={PASSWORD}\n              type=\"password\"\n              placeholder=\"Password\"\n              value={formData.password}\n              onChange={updateFormElement}\n            />\n            <Form.Text className=\"d-none text-danger\" id={PASSWORD + \"-error\"}>\n              Please choose a safer password. It should be at least 6 characters\n              long, contain lower and uppercase letters as well as at least one\n              number.\n            </Form.Text>\n          </Form.Group>\n          <Form.Group controlId={REPEATED_PASSWORD}>\n            <Form.Label>Repeat Password</Form.Label>\n            <Form.Control\n              name={REPEATED_PASSWORD}\n              type=\"password\"\n              placeholder=\"Password\"\n              value={formData.repeatPassword}\n              onChange={updateFormElement}\n            />\n            <Form.Text\n              className=\"d-none text-danger\"\n              id={REPEATED_PASSWORD + \"-error\"}\n            >\n              Passwords don't match\n            </Form.Text>\n          </Form.Group>\n          <Form.Group controlId={LEGAL_AGREEMENT}>\n            <Form.Check\n              name={LEGAL_AGREEMENT}\n              type=\"checkbox\"\n              label=\"Check me out\"\n              checked={formData.legalAgreement}\n              onChange={updateFormElement}\n            />\n            <Form.Text\n              className=\"d-none text-danger\"\n              id={LEGAL_AGREEMENT + \"-error\"}\n            >\n              You need to agree to the Terms of use for our Service\n            </Form.Text>\n          </Form.Group>\n          <Form.Group controlId=\"formCheckbox\">\n            <Button variant=\"primary\" type=\"submit\" id={SUBMIT}>\n              Submit\n            </Button>\n            <div id={FORM_ERROR_DIV_ID}>\n              {/*error messages inserted here */}\n            </div>\n            <Form.Text className=\"d-none text-success\" id={FORM_SUCCESS_ID}>\n              Sign up successful - check your email!\n            </Form.Text>\n          </Form.Group>\n        </Form>\n      </Card.Body>\n    </Card>\n  );\n};\n","import React from \"react\";\nimport { Form, Button, Card } from \"react-bootstrap\";\n\nexport default () => (\n  <Card>\n    <Card.Body>\n      <Card.Title>Login</Card.Title>\n      <Form>\n        <Form.Group controlId=\"formEmail\">\n          <Form.Label>Email address</Form.Label>\n          <Form.Control type=\"email\" placeholder=\"Enter email\" />\n          <Form.Text className=\"text-muted\">\n            We'll never share your email with anyone else.\n          </Form.Text>\n        </Form.Group>\n\n        <Form.Group controlId=\"formPassword\">\n          <Form.Label>Password</Form.Label>\n          <Form.Control type=\"password\" placeholder=\"Password\" />\n        </Form.Group>\n        <Button variant=\"primary\" type=\"submit\">\n          Submit\n        </Button>\n      </Form>\n    </Card.Body>\n  </Card>\n);\n","import React from \"react\";\nimport { Container } from \"react-bootstrap\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport NavBar from \"./persistent/navMenu\";\nimport RegisterPage from \"./forms/registration/registrationForm\";\nimport LoginPage from \"./forms/loginForm\";\n\nfunction App() {\n  return (\n    <Container fluid className=\"px-0 main\">\n      <NavBar />\n      <Container className=\"mt-2\">\n        <Router>\n          <Switch>\n            <Route path=\"/register\" component={RegisterPage} />\n            <Route path=\"/login\" component={LoginPage} />\n          </Switch>\n        </Router>\n      </Container>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from \"redux\";\n\nexport default combineReducers({});\n","import { createStore, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n  rootReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./style/index.scss\";\n\nimport { Provider } from \"react-redux\";\nimport store from \"./state/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}